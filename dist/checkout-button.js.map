{"version":3,"file":"checkout-button.js","mappings":"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GAAkBlgB,GAmShD,OAjSAif,EAASziE,SACL,aACA,WACI,WAAI,GACAorB,EACA02C,EACAte,EACA2e,EACAD,EACAD,EACAG,EACAU,EACAd,EACA,IAAI,GAVR,IAcRS,EAASziE,SACL,kBACA,WACI,WAAI,GACAorB,EACA02C,EC9IL,IAAI,GAA4B,IAAI,IAAwB,KAAApe,qBD4I3D,IAOR+e,EAASziE,SACL,qBACA,WACI,WAAI,GACAorB,EACA02C,EACA4B,EACAP,EACAxB,EACAj1C,OANJ,IAUR+1C,EAASziE,SACL,4BACA,WACI,WAAI,GACAorB,EACA02C,EACA4B,EACAP,EACAxB,EACAj1C,OANJ,IAUR+1C,EAASziE,SACL,oBACA,WACI,WAAI,GACAorB,EACA+2C,EACAuB,EACAP,EACAxB,EALJ,IASRc,EAASziE,SACL,sBACA,WACI,WAAI,GACAorB,EACAu2C,EACAG,EACAxe,GAAgCl4B,EAAO,IAAI,IAC3Cs4C,EALJ,IASRjB,EAASziE,SACL,sBACA,WACI,WAAI,GACAorB,EACAu2C,EACAG,EACAxe,GAAgCl4B,EAAO,IAAI,IAC3Cs4C,EALJ,IASRjB,EAASziE,SACL,2BACA,WACI,WAAI,GACAorB,EACAu2C,EACAG,EACAxe,GAAgCl4B,EAAO,IAAI,IAC3Cs4C,EALJ,IASRjB,EAASziE,SACL,kBACA,WACI,WAAI,GACAorB,EACAu2C,EACAG,EACAxe,GAAgCl4B,EAAO,IAAI,IAC3Cs4C,EALJ,IASRjB,EAASziE,SACL,wBACA,WACI,WAAI,GACAorB,EACAu2C,EACAG,EACAxe,GACIl4B,EACA,IAAI,GAA8B+3C,IAEtCO,EARJ,IAYRjB,EAASziE,SACL,0BACA,WACI,WAAI,GACAorB,EACAu2C,EACAG,EACAxe,GACIl4B,EACA,IAAI,GAAgCo4B,IAExCkgB,EARJ,IAYRjB,EAASziE,SACL,4BACA,WACI,WAAI,GACAorB,EACAu2C,EACAG,EACAxe,GAAgCl4B,EAAO,IAAI,IAC3Cs4C,EALJ,IASRjB,EAASziE,SACL,sBACA,WACI,WAAI,GACAorB,EACAu2C,EACAG,EACAxe,GAAgCl4B,EAAO,IAAI,IAC3Cs4C,EALJ,IASRjB,EAASziE,SACL,qBACA,WACI,WAAI,GACAorB,EACAu2C,EACAG,EACAxe,GAAgCl4B,EAAO,IAAI,IAC3Cs4C,EALJ,IASRjB,EAASziE,SACL,wBACA,WACI,WAAI,GACAorB,EACAu2C,EACAG,EACAxe,GAAgCl4B,EAAO,IAAI,IAC3Cs4C,EALJ,IASRjB,EAASziE,SACL,eACA,WACI,WAAI,GACAorB,EACA02C,EACA,IAAI,GAAuB5lC,GAC3B9c,EAJJ,IAQRqjD,EAASziE,SACL,kBACA,WACI,WAAI,GACAorB,EACA02C,EACA,IAAI,GAAmB5lC,GACvBylC,EACAziD,EALJ,IASRujD,EAASziE,SACL,mBACA,WACI,WAAI,GACAorB,EACA02C,EACA4B,EACA/B,EACAyB,EACAC,EACAnB,EACAD,EACAG,EACAJ,EAVJ,IAcRS,EAASziE,SACL,0BACA,WACI,WAAI,GACAorB,EACA02C,EACA4B,EACA/B,EACAyB,EACAC,EACArB,EACAE,EACAD,EACAG,EAVJ,IAcRK,EAASziE,SACL,wBACA,WACI,WAAI,GACAorB,EACA02C,EACA4B,EACA/B,EACAyB,EACAC,EANJ,IAURZ,EAASziE,SACL,0BACA,WACI,WAAI,GACAorB,EACA02C,EACAsB,EACAC,EACArB,EACAE,EACAD,EACAG,EARJ,IAYRK,EAASziE,SACL,yBACA,WACI,WAAI,GACAorB,EACA02C,EACA4B,EACA/B,EACAyB,EACAC,EANJ,IAUDZ,CACX,CJ1WYkB,CACIv4C,EACAC,EACAm4B,EACAme,EACAviD,EACAF,GAEJqjD,EACA,IAAI,GAA2B,IAAI,GAA2B/e,KAG1E,C","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/webpack/runtime/compat get default export","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/webpack/runtime/make namespace object","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/request-sender\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/form-poster\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"tslib\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/data-store\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unrecoverable-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"lodash\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-internal-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-payment-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-storefront-error-response.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs/operators\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/error-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/omit-deep.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/clear-error-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-set.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-plain-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/array-replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-merge.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/merge-or-push.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-flatten.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-with-sorted-keys.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/memoize\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"reselect\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/create-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/with-memoized-combiner.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/create-freeze-proxy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/supported-payment-instruments.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/is-address-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-internal-checkout-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/create-request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-action-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store-reducer.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/bigpay-client\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/create-payment-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cache-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/is-action-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cachable-action-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/is-apple-pay-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-request-sender.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/script-loader\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/throw-error-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-or-merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-default-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/errors/checkout-not-available-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-comparator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-changed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/is-spam-protection-succeeded-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/errors/unexpected-detachment-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/detachment-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/mutation-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/parse-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/is-iframe-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-poster.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-listener.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/append-www.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/payment-human-verification-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/create-spam-protection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-order-data-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-consistency-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/order-tax-provider-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/map-to-internal-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-coupon.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/generated/checkout-button-method-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-gift-certificate.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-items.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-cart.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/promotion/map-to-discount-notifications.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/map-to-internal-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"card-validator\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-number-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/map-to-internal-order.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/map-to-internal-shipping-option.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-params.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/errors/update-subscriptions-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/clone-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/default-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/create-data-store-projection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/payment-integration-store-projection-factory.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"shallowequal\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-maps.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-resolver.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-private.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/selector-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-error-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-status-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/is-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/set-unique-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getShippableItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getLineItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-get-first-and-last-name.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv3-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-bnz-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-checkoutcom-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-cybersourcev2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-orbital-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-upe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/apple-pay/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/get-callback-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-inline-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/resolve-id-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/is-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/create-amazon-pay-v2-payment-processor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/request-sender\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/form-poster\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"tslib\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/data-store\");","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message:\n                message ||\n                'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length\n            ? errors.map((message) => ({ code: body.type, message }))\n            : [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors\n        .reduce((result: string[], error) => {\n            if (error) {\n                return [...result, error];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors\n        .reduce((result: string[], error) => {\n            if (error && error.message) {\n                return [...result, error.message];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody,\n} from './error-response-body';\nimport {\n    mapFromInternalErrorResponse,\n    mapFromPaymentErrorResponse,\n    mapFromStorefrontErrorResponse,\n    RequestError,\n    TimeoutError,\n} from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) =>\n            mapFromInternalErrorResponse(response, message),\n        );\n        this.register('storefront', (response, message) =>\n            mapFromStorefrontErrorResponse(response, message),\n        );\n        this.register('payment', (response, message) =>\n            mapFromPaymentErrorResponse(response, message),\n        );\n        this.register('timeout', (response) => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod =\n            this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ? internalType : 'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return (\n            !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string'\n        );\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return (\n            typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number'\n        );\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string,\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [\n            {\n                code: body.code || body.type,\n                message: body.detail || body.title,\n            },\n        ],\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    | LoadCheckoutRequestedAction\n    | LoadCheckoutSucceededAction\n    | LoadCheckoutFailedAction\n    | LoadFormFieldsAction\n    | LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    | UpdateCheckoutRequestedAction\n    | UpdateCheckoutSucceededAction\n    | UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction =\n    | LoadOrderAction\n    | LoadOrderPaymentsAction\n    | SubmitOrderAction\n    | FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction =\n    | LoadOrderPaymentsRequestedAction\n    | LoadOrderPaymentsSucceededAction\n    | LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    | LoadOrderRequestedAction\n    | LoadOrderSucceededAction\n    | LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    | SubmitOrderRequestedAction\n    | SubmitOrderSucceededAction\n    | SubmitOrderFailedAction\n    | LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    | FinalizeOrderRequestedAction\n    | FinalizeOrderSucceededAction\n    | FinalizeOrderFailedAction\n    | LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    | UpdateSubscriptionsRequestedAction\n    | UpdateSubscriptionsSucceededAction\n    | UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction = ContinueAsGuestAction | UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    | UpdateBillingAddressRequested\n    | UpdateBillingAddressSucceeded\n    | UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    | ContinueAsGuestRequested\n    | ContinueAsGuestSucceeded\n    | ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(\n    object: any,\n    predicate: (value: any, key: string) => boolean,\n): any {\n    if (Array.isArray(object)) {\n        return object.map((value) => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(\n            omitBy(object, predicate),\n            (result, value, key) => {\n                result[key] = omitDeep(value, predicate);\n            },\n            {} as { [key: string]: any },\n        );\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<\n    TState extends { [key: string]: any },\n    TAction extends Action,\n>(state: TState, action: TAction): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, (value) => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if (objectA instanceof Date && objectB instanceof Date) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof Date || objectB instanceof Date) {\n            return false;\n        }\n\n        if (objectA instanceof RegExp && objectB instanceof RegExp) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof RegExp || objectB instanceof RegExp) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions,\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!Object.prototype.hasOwnProperty.call(objectB, key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K],\n): T {\n    if (\n        object &&\n        Object.prototype.hasOwnProperty.call(object, key) &&\n        isEqual(object[key], value)\n    ) {\n        return object;\n    }\n\n    return {\n        ...(object as any),\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, {\n    BillingAddressErrorsState,\n    BillingAddressStatusesState,\n    DEFAULT_STATE,\n} from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action,\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction,\n): BillingAddress | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(errors, 'continueAsGuestError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n            return objectSet(errors, 'continueAsGuestError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isContinuingAsGuest', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(statuses, 'isContinuingAsGuest', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(\n    currentArray: T[] | undefined,\n    newArray: T[],\n    options?: ArrayReplaceOptions,\n): T[];\nfunction arrayReplace<T>(\n    currentArray: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): undefined;\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined;\n\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(objectMerge(currentItem, newItem), currentItem, newItem);\n            }\n\n            return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(arrayReplace(currentItem, newItem), currentItem, newItem);\n        }\n\n        return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (\n        sameAsCurrentCount === newArray.length &&\n        currentArray &&\n        currentArray.length === newArray.length\n    ) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(\n    currentObject: T | undefined,\n    newObject: Partial<T>,\n): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\n\nfunction objectMerge<T extends object>(\n    currentObject?: T,\n    newObject?: Partial<T>,\n): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>).reduce((result, key) => {\n        const currentValue = result[key];\n        const newValue = newObject[key];\n\n        if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n            return objectSet(result, key, objectMerge(currentValue, newValue));\n        }\n\n        if (isArray(currentValue) && isArray(newValue)) {\n            return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n        }\n\n        return objectSet(result, key, newValue as any);\n    }, currentObject);\n}\n\nexport default objectMerge;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction = ApplyCouponAction | RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    | ApplyCouponRequestedAction\n    | ApplyCouponSucceededAction\n    | ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    | RemoveCouponRequestedAction\n    | RemoveCouponSucceededAction\n    | RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction = ApplyGiftCertificateAction | RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    | ApplyGiftCertificateRequestedAction\n    | ApplyGiftCertificateSucceededAction\n    | ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    | RemoveGiftCertificateRequestedAction\n    | RemoveGiftCertificateSucceededAction\n    | RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    | CreateConsignmentsAction\n    | UpdateConsignmentAction\n    | DeleteConsignmentAction\n    | UpdateShippingOptionAction\n    | LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    | CreateConsignmentsRequestedAction\n    | CreateConsignmentsSucceededAction\n    | CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    | UpdateConsignmentRequestedAction\n    | UpdateConsignmentSucceededAction\n    | UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    | DeleteConsignmentRequestedAction\n    | DeleteConsignmentSucceededAction\n    | DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    | UpdateShippingOptionRequestedAction\n    | UpdateShippingOptionSucceededAction\n    | UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    | LoadShippingOptionsRequestedAction\n    | LoadShippingOptionsSucceededAction\n    | LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    | InitializeButtonRequestedAction\n    | InitializeButtonSucceededAction\n    | InitializeButtonFailedAction\n    | LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    | DeinitializeButtonRequestedAction\n    | DeinitializeButtonSucceededAction\n    | DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(state: CartState = DEFAULT_STATE, action: Action): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action:\n        | BillingAddressAction\n        | CheckoutAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction,\n): Cart | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectMerge(data, action.payload && action.payload.cart);\n\n        default:\n            return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction,\n): CartStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction,\n): CartErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined;\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined;\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined;\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    | LoadConfigRequestedAction\n    | LoadConfigSucceededAction\n    | LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, {\n    CheckoutButtonDataState,\n    CheckoutButtonErrorsState,\n    CheckoutButtonStatusesState,\n    DEFAULT_STATE,\n} from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonDataState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            if (!action.meta || !action.meta.containerId) {\n                return data;\n            }\n\n            return objectMerge(data, {\n                initializedContainers: {\n                    [action.meta.containerId]: true,\n                },\n            });\n\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(errors, 'initializeError', undefined);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n            return objectSet(errors, 'initializeError', action.payload);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(errors, 'deinitializeError', undefined);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n            return objectSet(errors, 'deinitializeError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n            return objectSet(statuses, 'isInitializing', true);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(statuses, 'isInitializing', false);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n            return objectSet(statuses, 'isDeinitializing', true);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(statuses, 'isDeinitializing', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n    host?: string;\n    locale?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action,\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Config | undefined, action: LoadConfigAction): Config | undefined {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction,\n): ConfigErrorsState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction,\n): ConfigStatusesState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConfigActionType.LoadConfigSucceeded:\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action,\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction,\n): Coupon[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return arrayReplace(data, action.payload && action.payload.coupons);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: CouponErrorsState = {}, action: CouponAction): CouponErrorsState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n        case CouponActionType.ApplyCouponSucceeded:\n            return objectSet(errors, 'applyCouponError', undefined);\n\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(errors, 'applyCouponError', action.payload);\n\n        case CouponActionType.RemoveCouponRequested:\n        case CouponActionType.RemoveCouponSucceeded:\n            return objectSet(errors, 'removeCouponError', undefined);\n\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(errors, 'removeCouponError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction,\n): CouponStatusesState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n            return objectSet(statuses, 'isApplyingCoupon', true);\n\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(statuses, 'isApplyingCoupon', false);\n\n        case CouponActionType.RemoveCouponRequested:\n            return objectSet(statuses, 'isRemovingCoupon', true);\n\n        case CouponActionType.RemoveCouponSucceeded:\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(statuses, 'isRemovingCoupon', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\nimport { SpamProtectionAction } from '../spam-protection';\n\nimport Customer from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\n\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\n\n    StripeLinkAuthenticated = 'STRIPE_LINK_AUTHENTICATED',\n}\n\nexport type CustomerAction =\n    | SignInCustomerAction\n    | SignOutCustomerAction\n    | CreateCustomerAddressAction\n    | CreateCustomerAction;\n\nexport type CreateCustomerAction =\n    | CreateCustomerRequestedAction\n    | CreateCustomerSucceededAction\n    | CreateCustomerFailedAction\n    | SpamProtectionAction\n    | LoadCheckoutAction;\n\nexport type CreateCustomerAddressAction =\n    | CreateCustomerAddressRequestedAction\n    | CreateCustomerAddressSucceededAction\n    | CreateCustomerAddressFailedAction\n    | LoadCheckoutAction;\n\nexport type SignInCustomerAction =\n    | SignInCustomerRequestedAction\n    | SignInCustomerSucceededAction\n    | SignInCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    | SignOutCustomerRequestedAction\n    | SignOutCustomerSucceededAction\n    | SignOutCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface StripeLinkAuthenticatedAction extends Action {\n    type: CustomerActionType.StripeLinkAuthenticated;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface CreateCustomerRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerRequested;\n}\n\nexport interface CreateCustomerSucceededAction extends Action {\n    type: CustomerActionType.CreateCustomerSucceeded;\n}\n\nexport interface CreateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerFailed;\n}\n\nexport interface CreateCustomerAddressRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerAddressRequested;\n}\n\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\n}\n\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerAddressFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, {\n    DEFAULT_STATE,\n    GiftCertificateErrorsState,\n    GiftCertificateStatusesState,\n} from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action,\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction,\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction,\n): GiftCertificateErrorsState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n            return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction,\n): GiftCertificateStatusesState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n            return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n            return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n    statuses: CustomerStatusesState;\n    errors: CustomerErrorsState;\n}\n\nexport interface CustomerErrorsState {\n    createError?: Error;\n    createAddressError?: Error;\n}\n\nexport interface CustomerStatusesState {\n    isCreating?: boolean;\n    isCreatingAddress?: boolean;\n}\n\nexport const DEFAULT_STATE: CustomerState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    ExecutePaymentMethodCheckoutFailed = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_FAILED',\n    ExecutePaymentMethodCheckoutRequested = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_REQUESTED',\n    ExecutePaymentMethodCheckoutSucceeded = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    | CustomerStrategySignInAction\n    | CustomerStrategySignOutAction\n    | CustomerStrategyExecutePaymentMethodCheckoutAction\n    | CustomerStrategyInitializeAction\n    | CustomerStrategyDeinitializeAction\n    | CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    | SignInRequestedAction\n    | SignInSucceededAction\n    | SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    | SignOutRequestedAction\n    | SignOutSucceededAction\n    | SignOutFailedAction;\n\nexport type CustomerStrategyExecutePaymentMethodCheckoutAction =\n    | ExecutePaymentMethodCheckoutRequestedAction\n    | ExecutePaymentMethodCheckoutSucceededAction\n    | ExecutePaymentMethodCheckoutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface ExecutePaymentMethodCheckoutRequestedAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested;\n}\n\nexport interface ExecutePaymentMethodCheckoutSucceededAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded;\n}\n\nexport interface ExecutePaymentMethodCheckoutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Customer from './customer';\nimport {\n    CustomerAction,\n    CustomerActionType,\n    StripeLinkAuthenticatedAction,\n} from './customer-actions';\nimport CustomerState, {\n    CustomerErrorsState,\n    CustomerStatusesState,\n    DEFAULT_STATE,\n} from './customer-state';\n\ntype ReducerActionType =\n    | CheckoutAction\n    | ContinueAsGuestAction\n    | CustomerAction\n    | StripeLinkAuthenticatedAction;\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): CustomerState {\n    const reducer = combineReducers<CustomerState, ReducerActionType>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Customer | undefined, action: ReducerActionType): Customer | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectMerge(data, action.payload && action.payload.customer);\n\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectMerge(data, action.payload);\n\n        case CustomerActionType.StripeLinkAuthenticated:\n            return objectSet(data, 'isStripeLinkAuthenticated', action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\n    action: ReducerActionType,\n): CustomerErrorsState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case CustomerActionType.CreateCustomerFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(errors, 'createAddressError', undefined);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n            return objectSet(errors, 'createAddressError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\n    action: ReducerActionType,\n): CustomerStatusesState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case CustomerActionType.CreateCustomerFailed:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(statuses, 'isCreating', false);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n            return objectSet(statuses, 'isCreatingAddress', true);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(statuses, 'isCreatingAddress', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    executePaymentMethodCheckoutError?: Error;\n    executePaymentMethodCheckoutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isExecutingPaymentMethodCheckout?: boolean;\n    executePaymentMethodCheckoutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    | LoadFormFieldsRequestedAction\n    | LoadFormFieldsSucceededAction\n    | LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, {\n    CustomerStrategyDataState,\n    CustomerStrategyErrorsState,\n    CustomerStrategyStatusesState,\n    DEFAULT_STATE,\n} from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action,\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction,\n): CustomerStrategyDataState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction,\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(errors, {\n                signInError: undefined,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n            return objectMerge(errors, {\n                signInError: action.payload,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(errors, {\n                signOutError: undefined,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n            return objectMerge(errors, {\n                signOutError: action.payload,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: undefined,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: action.payload,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction,\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n            return objectMerge(statuses, {\n                isSigningIn: true,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(statuses, {\n                isSigningIn: false,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n            return objectMerge(statuses, {\n                isSigningOut: true,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(statuses, {\n                isSigningOut: false,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: true,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: false,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    | LoadCountriesRequestedAction\n    | LoadCountriesSucceededAction\n    | LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, {\n    DEFAULT_STATE,\n    FormFieldsErrorState,\n    FormFieldsStatusesState,\n} from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action,\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction,\n): FormFields | undefined {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction,\n): FormFieldsErrorState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction,\n): FormFieldsStatusesState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, {\n    CountryErrorsState,\n    CountryStatusesState,\n    DEFAULT_STATE,\n} from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action,\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction,\n): CountryErrorsState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n        case CountryActionType.LoadCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction,\n): CountryStatusesState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CountryActionType.LoadCountriesSucceeded:\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction | InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    | SubmitPaymentRequestedAction\n    | SubmitPaymentSucceededAction\n    | SubmitPaymentFailedAction\n    | LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    | InitializeOffsitePaymentRequestedAction\n    | InitializeOffsitePaymentSucceededAction\n    | InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    | LoadPaymentMethodRequestedAction\n    | LoadPaymentMethodSucceededAction\n    | LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    | LoadPaymentMethodsRequestedAction\n    | LoadPaymentMethodsSucceededAction\n    | LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction\n    extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, {\n    DEFAULT_STATE,\n    OrderDataState,\n    OrderErrorsState,\n    OrderMetaState,\n    OrderStatusesState,\n} from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action,\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction,\n): OrderDataState | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, ['billingAddress', 'coupons']),\n            ) as OrderDataState;\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction,\n): OrderMetaState | undefined {\n    switch (action.type) {\n        case OrderActionType.FinalizeOrderSucceeded:\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectMerge(meta, {\n                ...action.meta,\n                callbackUrl: action.payload && action.payload.order.callbackUrl,\n                orderToken: action.payload && action.payload.order.token,\n                payment: action.payload && action.payload.order && action.payload.order.payment,\n            });\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction,\n): OrderErrorsState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction,\n): OrderStatusesState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(\n    state: PaymentState = {},\n    action: PaymentAction,\n): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentResponseBody | undefined,\n    action: PaymentAction,\n): PaymentResponseBody | undefined {\n    switch (action.type) {\n        case PaymentActionType.SubmitPaymentSucceeded:\n            return action.payload;\n\n        default:\n            return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    | PaymentStrategyExecuteAction\n    | PaymentStrategyFinalizeAction\n    | PaymentStrategyInitializeAction\n    | PaymentStrategyDeinitializeAction\n    | PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    | FinalizeRequestedAction\n    | FinalizeSucceededAction\n    | FinalizeFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, {\n    DEFAULT_STATE,\n    PaymentMethodErrorsState,\n    PaymentMethodStatusesState,\n} from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action,\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction,\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return mergeOrPush(\n                data || [],\n                action.payload,\n                action.payload && {\n                    id: action.payload.id,\n                    gateway: action.payload.gateway,\n                },\n            );\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return arrayReplace(data, action.payload, {\n                matchObject: (methodA, methodB) =>\n                    methodA.id === methodB.id && methodA.gateway === methodB.gateway,\n            });\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction,\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction,\n): PaymentMethodErrorsState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return objectMerge(errors, {\n                loadMethodId: undefined,\n                loadMethodError: undefined,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(errors, {\n                loadMethodId: action.meta.methodId,\n                loadMethodError: action.payload,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction,\n): PaymentMethodStatusesState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n            return objectMerge(statuses, {\n                isLoadingMethod: true,\n                loadMethodId: action.meta.methodId,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(statuses, {\n                isLoadingMethod: false,\n                loadMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(array: T[], item?: T, predicate?: ValueKeyIteratee<T>): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(\n        array,\n        typeof predicate === 'object' ? pickBy(predicate) : predicate || defaultPredicate,\n    );\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] =\n            isPlainObject(existingItem) && isPlainObject(item)\n                ? objectMerge(existingItem, item)\n                : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction = LoadInstrumentsAction | DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    | LoadInstrumentsRequestedAction\n    | LoadInstrumentsSucceededAction\n    | LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    | DeleteInstrumentRequestedAction\n    | DeleteInstrumentSucceededAction\n    | DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, {\n    DEFAULT_STATE,\n    PaymentStrategyDataState,\n    PaymentStrategyErrorsState,\n    PaymentStrategyStatusesState,\n} from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action,\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction,\n): PaymentStrategyDataState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction,\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.DeinitializeRequested:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.ExecuteRequested:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(errors, {\n                executeError: undefined,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n            return objectMerge(errors, {\n                executeError: action.payload,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(errors, {\n                finalizeError: undefined,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n            return objectMerge(errors, {\n                finalizeError: action.payload,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction,\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.InitializeFailed:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.DeinitializeFailed:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteRequested:\n            return objectMerge(statuses, {\n                isExecuting: true,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(statuses, {\n                isExecuting: false,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n            return objectMerge(statuses, {\n                isFinalizing: true,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(statuses, {\n                isFinalizing: false,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    ForgetCheckoutRemoteCustomerRequested = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_REQUESTED',\n    ForgetCheckoutRemoteCustomerSucceeded = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_SUCCEEDED',\n    ForgetCheckoutRemoteCustomerFailed = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_FAILED',\n\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction =\n    | ForgetCheckoutRemoteCustomerAction\n    | InitializeRemoteBillingAction\n    | InitializeRemoteShippingAction\n    | InitializeRemotePaymentAction\n    | SignOutRemoteCustomerAction\n    | LoadRemoteSettingsAction\n    | UpdateRemoteCheckoutAction;\n\nexport type ForgetCheckoutRemoteCustomerAction =\n    | ForgetCheckoutRemoteCustomerRequestedAction\n    | ForgetCheckoutRemoteCustomerSucceededAction\n    | ForgetCheckoutRemoteCustomerFailedAction;\n\nexport interface ForgetCheckoutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested;\n}\n\nexport interface ForgetCheckoutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded;\n}\n\nexport interface ForgetCheckoutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed;\n}\n\nexport type InitializeRemoteBillingAction =\n    | InitializeRemoteBillingSucceededAction\n    | InitializeRemoteBillingFailedAction\n    | InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction =\n    | InitializeRemoteShippingSucceededAction\n    | InitializeRemoteShippingFailedAction\n    | InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction =\n    | InitializeRemotePaymentSucceededAction\n    | InitializeRemotePaymentFailedAction\n    | InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction =\n    | SignOutRemoteCustomerSucceededAction\n    | SignOutRemoteCustomerFailedAction\n    | SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction =\n    | LoadRemoteSettingsSucceededAction\n    | LoadRemoteSettingsRequestedAction\n    | LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, {\n    DEFAULT_STATE,\n    InstrumentErrorState,\n    InstrumentMeta,\n    InstrumentStatusState,\n} from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action,\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction,\n): PaymentInstrument[] {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return arrayReplace(data, (action.payload && action.payload.vaultedInstruments) || []);\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction,\n): InstrumentMeta | undefined {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction,\n): InstrumentErrorState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(errors, {\n                deleteError: undefined,\n                failedInstrument: undefined,\n            });\n\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(errors, {\n                deleteError: action.payload,\n                failedInstrument: action.meta.instrumentId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction,\n): InstrumentStatusState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n            return objectMerge(statuses, {\n                isDeleting: true,\n                deletingInstrument: action.meta.instrumentId,\n            });\n\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(statuses, {\n                isDeleting: false,\n                deletingInstrument: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction,\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: RemoteCheckout, action: RemoteCheckoutAction): RemoteCheckout {\n    switch (action.type) {\n        case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n            return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n        case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n            return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n        case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n            return objectSet(data, 'settings', action.payload);\n\n        case RemoteCheckoutActionType.UpdateRemoteCheckout:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { PickupOptionMeta, PickupOptionResult } from './pickup-option';\n\nexport enum PickupOptionActionType {\n    LoadPickupOptionsRequested = 'LOAD_PICKUP_OPTIONS_REQUESTED',\n    LoadPickupOptionsSucceeded = 'LOAD_PICKUP_OPTIONS_SUCCEEDED',\n    LoadPickupOptionsFailed = 'LOAD_PICKUP_OPTIONS_FAILED',\n}\n\nexport type LoadPickupOptionsAction =\n    | PickupOptionRequestedAction\n    | LoadPickupOptionsSucceededAction\n    | LoadPickupOptionsFailedAction;\n\nexport interface PickupOptionRequestedAction extends Action {\n    type: PickupOptionActionType.LoadPickupOptionsRequested;\n}\n\nexport interface LoadPickupOptionsSucceededAction\n    extends Action<PickupOptionResult[], PickupOptionMeta> {\n    type: PickupOptionActionType.LoadPickupOptionsSucceeded;\n}\n\nexport interface LoadPickupOptionsFailedAction extends Action<Error> {\n    type: PickupOptionActionType.LoadPickupOptionsFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, {\n    ConsignmentErrorsState,\n    ConsignmentStatusesState,\n    DEFAULT_STATE,\n} from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action,\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction,\n): Consignment[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n            return arrayReplace(data, action.payload && action.payload.consignments);\n\n        case CustomerActionType.SignOutCustomerSucceeded:\n            return arrayReplace(data, []);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(statuses, 'isCreating', false);\n\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        default:\n            return statuses;\n    }\n}\n","/**\n * Takes a nested object and flattens it.\n */\nexport default function objectFlatten(\n    object: { [key: string]: any },\n    parent?: string,\n): { [key: string]: any } {\n    const flattened: { [key: string]: any } = {};\n\n    Object.keys(object).forEach((key: string) => {\n        const value = object[key];\n        const keyString = parent ? `${parent}.${key}` : key;\n\n        if (typeof value === 'object') {\n            Object.assign(flattened, objectFlatten(value, keyString));\n        } else {\n            flattened[keyString] = value;\n        }\n    });\n\n    return flattened;\n}\n","export default function objectWithSortedKeys(object: { [key: string]: any }) {\n    const keys = Object.keys(object);\n    const sortedKeys = keys.sort();\n\n    const sortedArray = sortedKeys.reduce(\n        (previous, current) => ({\n            ...previous,\n            [current]: object[current],\n        }),\n        {},\n    );\n\n    return sortedArray;\n}\n","import { PickupOptionQueryMap } from './pickup-option';\n\nexport default interface PickupOptionState {\n    data?: PickupOptionQueryMap;\n    errors: PickupOptionErrorsState;\n    statuses: PickupOptionStatusesState;\n}\n\nexport interface PickupOptionErrorsState {\n    loadError?: Error;\n}\n\nexport interface PickupOptionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: PickupOptionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction =\n    | LoadShippingCountriesRequestedAction\n    | LoadShippingCountriesSucceededAction\n    | LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectFlatten, objectSet, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionQueryMap } from './pickup-option';\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\nimport PickupOptionState, {\n    DEFAULT_STATE,\n    PickupOptionErrorsState,\n    PickupOptionStatusesState,\n} from './pickup-option-state';\n\nexport default function pickupOptionReducer(\n    state: PickupOptionState = DEFAULT_STATE,\n    action: Action,\n): PickupOptionState {\n    const reducer = combineReducers<PickupOptionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PickupOptionQueryMap | undefined,\n    action: LoadPickupOptionsAction,\n): PickupOptionQueryMap | undefined {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            if (action.meta) {\n                const optionQuery = {\n                    consignmentId: action.meta.consignmentId,\n                    searchArea: action.meta.searchArea,\n                };\n                const flattenedMeta = objectFlatten(optionQuery);\n                const sortedflattenedMeta = objectWithSortedKeys(flattenedMeta);\n                const keyString = btoa(`${JSON.stringify(sortedflattenedMeta)}`);\n\n                return objectSet(data, keyString, action.payload);\n            }\n\n            break;\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: PickupOptionErrorsState = DEFAULT_STATE.errors, action: Action) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PickupOptionStatusesState = DEFAULT_STATE.statuses,\n    action: Action,\n) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    | ShippingStrategyUpdateAddressAction\n    | ShippingStrategySelectOptionAction\n    | ShippingStrategyInitializeAction\n    | ShippingStrategyDeinitializeAction\n    | ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    | UpdateAddressRequestedAction\n    | UpdateAddressSucceededAction\n    | UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    | SelectOptionRequestedAction\n    | SelectOptionSucceededAction\n    | SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, {\n    DEFAULT_STATE,\n    ShippingCountryErrorsState,\n    ShippingCountryStatusesState,\n} from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action,\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction,\n): ShippingCountryErrorsState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction,\n): ShippingCountryStatusesState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    | SendSignInEmailRequestedAction\n    | SendSignInEmailSucceededAction\n    | SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, {\n    DEFAULT_STATE,\n    ShippingStrategyDataState,\n    ShippingStrategyErrorsState,\n    ShippingStrategyStatusesState,\n} from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action,\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction,\n): ShippingStrategyDataState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction,\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(errors, {\n                updateAddressError: undefined,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n            return objectMerge(errors, {\n                updateAddressError: action.payload,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(errors, {\n                selectOptionError: undefined,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n            return objectMerge(errors, {\n                selectOptionError: action.payload,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction,\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n            return objectMerge(statuses, {\n                isUpdatingAddress: true,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(statuses, {\n                isUpdatingAddress: false,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n            return objectMerge(statuses, {\n                isSelectingOption: true,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(statuses, {\n                isSelectingOption: false,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction = ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    | ApplyStoreCreditRequestedAction\n    | ApplyStoreCreditSucceededAction\n    | ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, {\n    DEFAULT_STATE,\n    SignInEmailErrorsState,\n    SignInEmailStatusesState,\n} from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action,\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction,\n): SignInEmail | undefined {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction,\n): SignInEmailErrorsState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(errors, 'sendError', undefined);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n            return objectSet(errors, 'sendError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction,\n): SignInEmailStatusesState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n            return objectSet(statuses, 'isSending', true);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(statuses, 'isSending', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, {\n    StoreCreditErrorsState,\n    StoreCreditStatusesState,\n} from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action,\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction,\n): StoreCreditErrorsState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n            return objectSet(errors, 'applyError', undefined);\n\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(errors, 'applyError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction,\n): StoreCreditStatusesState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n            return objectSet(statuses, 'isApplying', true);\n\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(statuses, 'isApplying', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | CheckoutVerifyRequestedAction\n    | CheckoutVerifyFailedAction\n    | CheckoutVerifySucceededAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n\nexport interface CheckoutVerifyRequestedAction extends Action {\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\n}\n\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\n}\n\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, {\n    DEFAULT_STATE,\n    SubscriptionsErrorsState,\n    SubscriptionsStatusesState,\n} from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action,\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsErrorsState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsStatusesState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<\n    Checkout,\n    'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'\n>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, {\n    CheckoutDataState,\n    CheckoutErrorsState,\n    CheckoutStatusesState,\n    DEFAULT_STATE,\n} from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action,\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action:\n        | CheckoutAction\n        | BillingAddressAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction\n        | OrderAction\n        | SpamProtectionAction\n        | StoreCreditAction,\n): CheckoutDataState | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case SpamProtectionActionType.VerifyCheckoutSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, [\n                    'billingAddress',\n                    'cart',\n                    'consignments',\n                    'customer',\n                    'coupons',\n                    'giftCertificates',\n                ]),\n            ) as CheckoutDataState;\n\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectSet(data, 'orderId', action.payload && action.payload.order.orderId);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction,\n): CheckoutErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction,\n): CheckoutStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case SpamProtectionActionType.ExecuteRequested:\n            return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n        case SpamProtectionActionType.ExecuteFailed:\n        case SpamProtectionActionType.ExecuteSucceeded:\n            return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n        default:\n            return statuses;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/memoize\");","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"reselect\");","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T,\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(\n        target,\n        (target, name) =>\n            (...args: any[]) =>\n                deepFreeze(target[name].call(target, ...args)),\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(\n    map: TMap,\n): TMap {\n    return Object.keys(map).reduce((result, key) => {\n        result[key] = createFreezeProxy(map[key]);\n\n        return result;\n    }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(\n    target: T,\n    trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any,\n): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, (prototype) => {\n        Object.getOwnPropertyNames(prototype).forEach((name) => {\n            if (\n                name === 'constructor' ||\n                typeof proxy[name] !== 'function' ||\n                name.charAt(0) === '_'\n            ) {\n                return;\n            }\n\n            proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n        });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'mollie.credit_card': {\n        provider: 'mollie',\n        method: 'credit_card',\n    },\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv3.scheme': {\n        provider: 'adyenv3',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.credit_card': {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.card': {\n        provider: 'checkoutcom',\n        method: 'card',\n    },\n    sagepay: {\n        provider: 'sagepay',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    'stripeupe.card': {\n        provider: 'stripeupe',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    cybersourcev2: {\n        provider: 'cybersourcev2',\n        method: 'credit_card',\n    },\n    bnz: {\n        provider: 'bnz',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n    digitalriver: {\n        provider: 'digitalriver',\n        method: 'credit_card',\n    },\n    moneris: {\n        provider: 'moneris',\n        method: 'credit_card',\n    },\n    cba_mpgs: {\n        provider: 'cba_mpgs',\n        method: 'credit_card',\n    },\n    worldpayaccess: {\n        provider: 'worldpayaccess',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(\n    addressA: Partial<Address>,\n    addressB: Partial<Address>,\n): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy(\n        {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            company: address.company,\n            address1: address.address1,\n            address2: address.address2,\n            city: address.city,\n            stateOrProvince: address.stateOrProvince,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n            phone: address.phone,\n            customFields: address.customFields,\n        },\n        identity,\n    );\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport {\n    createPaymentMethodSelectorFactory,\n    createPaymentSelectorFactory,\n    createPaymentStrategySelectorFactory,\n} from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport {\n    createConsignmentSelectorFactory,\n    createPickupOptionSelectorFactory,\n    createShippingAddressSelectorFactory,\n    createShippingCountrySelectorFactory,\n    createShippingStrategySelectorFactory,\n} from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createPickupOptionSelector = createPickupOptionSelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const pickupOptions = createPickupOptionSelector(state.pickupOptions);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(\n            state.checkout,\n            billingAddress,\n            cart,\n            consignments,\n            coupons,\n            customer,\n            giftCertificates,\n        );\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            pickupOptions,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        (getBillingAddress) => () => {\n            return guard(\n                getBillingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingBillingAddress),\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        (error) => () => error,\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        (status) => () => status,\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: BillingAddressState = DEFAULT_STATE): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        (state) => () => state,\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isInitializing) === true;\n                }\n\n                return some(statuses, { isInitializing: true });\n            }),\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        (data) =>\n            memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n                const method = data[methodId];\n\n                if (!method) {\n                    return false;\n                }\n\n                if (!containerId) {\n                    return some(\n                        method.initializedContainers,\n                        (isInitialized) => isInitialized === true,\n                    );\n                }\n\n                return method.initializedContainers[containerId] === true;\n            }),\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isDeinitializing) === true;\n                }\n\n                return some(statuses, { isDeinitializing: true });\n            }),\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.initializeError));\n\n                return method && method.initializeError;\n            }),\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.deinitializeError));\n\n                return method && method.deinitializeError;\n            }),\n    );\n\n    return memoizeOne((state: CheckoutButtonState = DEFAULT_STATE): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CouponState = DEFAULT_STATE): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n    getCustomerOrThrow(): Customer;\n    getCreateAccountError(): Error | undefined;\n    isCreatingCustomerAccount(): boolean;\n    getCreateAddressError(): Error | undefined;\n    isCreatingCustomerAddress(): boolean;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        (customer) => () => customer,\n    );\n\n    const getCustomerOrThrow = createSelector(getCustomer, (getCustomer) => () => {\n        return guard(\n            getCustomer(),\n            () => new MissingDataError(MissingDataErrorType.MissingCustomer),\n        );\n    });\n\n    const getCreateAccountError = createSelector(\n        (state: CustomerState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAccount = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreating,\n        (status) => () => status,\n    );\n\n    const getCreateAddressError = createSelector(\n        (state: CustomerState) => state.errors.createAddressError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAddress = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CustomerState = DEFAULT_STATE): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n            getCustomerOrThrow: getCustomerOrThrow(state),\n            getCreateAccountError: getCreateAccountError(state),\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\n            getCreateAddressError: getCreateAddressError(state),\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId,\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        (data) =>\n            <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n                return data[methodId];\n            },\n    );\n\n    return memoizeOne((state: RemoteCheckoutState = DEFAULT_STATE): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n    getShippingAddressOrThrow(): Address;\n    getShippingAddresses(): Address[];\n    getShippingAddressesOrThrow(): Address[];\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignment = consignments?.find(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignment?.shippingAddress;\n        },\n    );\n\n    const getShippingAddressOrThrow = createSelector(\n        getShippingAddress,\n        (getShippingAddress) => () => {\n            return guard(\n                getShippingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    const getShippingAddresses = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignments = consignments?.filter(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignments\n                ? shippingConsignments.map((consignment) => consignment.shippingAddress)\n                : [];\n        },\n    );\n\n    const getShippingAddressesOrThrow = createSelector(\n        getShippingAddresses,\n        (getShippingAddresses) => () => {\n            return guard(\n                getShippingAddresses(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    return memoizeOne((state: ConsignmentState = DEFAULT_STATE): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n            getShippingAddressOrThrow: getShippingAddressOrThrow(state),\n            getShippingAddresses: getShippingAddresses(state),\n            getShippingAddressesOrThrow: getShippingAddressesOrThrow(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentIdOrThrow(): { providerId: string; gatewayId?: string };\n    getPaymentStatus(): string | undefined;\n    getPaymentStatusOrThrow(): string;\n    getPaymentToken(): string | undefined;\n    getPaymentTokenOrThrow(): string;\n    getPaymentRedirectUrl(): string | undefined;\n    getPaymentRedirectUrlOrThrow(): string;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector,\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        },\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        (getOrder) => () => {\n            const order = getOrder();\n\n            return find(\n                order && order.payments,\n                ({ providerId }) =>\n                    providerId !== 'giftcertificate' && providerId !== 'storecredit',\n            ) as GatewayOrderPayment;\n        },\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        (getCheckout) => () => {\n            const checkout = getCheckout();\n\n            return find(\n                checkout && checkout.payments,\n                ({ providerType }) => providerType === HOSTED,\n            );\n        },\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        },\n    );\n\n    const getPaymentIdOrThrow = createSelector(getPaymentId, (getPaymentId) => () => {\n        return guard(\n            getPaymentId(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentId),\n        );\n    });\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        },\n    );\n\n    const getPaymentStatusOrThrow = createSelector(getPaymentStatus, (getPaymentStatus) => () => {\n        return guard(\n            getPaymentStatus(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentStatus),\n        );\n    });\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        },\n    );\n\n    const getPaymentTokenOrThrow = createSelector(getPaymentToken, (getPaymentToken) => () => {\n        return guard(\n            getPaymentToken(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentToken),\n        );\n    });\n\n    const getPaymentRedirectUrl = createSelector(getInternalPayment, (getInternalPayment) => () => {\n        const payment = getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    });\n\n    const getPaymentRedirectUrlOrThrow = createSelector(\n        getPaymentRedirectUrl,\n        (getPaymentRedirectUrl) => () => {\n            return guard(\n                getPaymentRedirectUrl(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentRedirectUrl),\n            );\n        },\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        (getOutstandingBalance) =>\n            (useStoreCredit = false) => {\n                const grandTotal = getOutstandingBalance(useStoreCredit);\n\n                return grandTotal ? grandTotal > 0 : false;\n            },\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        (getPaymentStatus) => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        },\n    );\n\n    return memoizeOne((checkout: CheckoutSelector, order: OrderSelector): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentIdOrThrow: getPaymentIdOrThrow({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentStatusOrThrow: getPaymentStatusOrThrow({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentTokenOrThrow: getPaymentTokenOrThrow({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            getPaymentRedirectUrlOrThrow: getPaymentRedirectUrlOrThrow({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        (signInEmail) => () => signInEmail,\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        (error) => () => error,\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SignInEmailState = DEFAULT_STATE): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        (cart) => () => cart,\n    );\n\n    const getCartOrThrow = createSelector(getCart, (getCart) => () => {\n        return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n    });\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CartState = DEFAULT_STATE): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getHost(): string | undefined;\n    getLocale(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState,\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => () => data,\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined\n                ? flashMessages.filter(({ type }) => filterType === type)\n                : flashMessages;\n        },\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields) => () =>\n            data && formFields\n                ? {\n                      ...data.storeConfig,\n                      formFields,\n                  }\n                : undefined,\n    );\n\n    const getStoreConfigOrThrow = createSelector(getStoreConfig, (getStoreConfig) => () => {\n        return guard(\n            getStoreConfig(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig),\n        );\n    });\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        (data) => () => data,\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        (data) => () => data,\n    );\n\n    const getHost = createSelector(\n        (state: ConfigState) => state.meta?.host,\n        (data) => () => data,\n    );\n\n    const getLocale = createSelector(\n        (state: ConfigState) => state.meta?.locale,\n        (data) => () => data,\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (state: ConfigState = DEFAULT_STATE, formState: FormFieldsState): ConfigSelector => {\n            return {\n                getConfig: getConfig(state),\n                getFlashMessages: getFlashMessages(state),\n                getStoreConfig: getStoreConfig(state, { formState }),\n                getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n                getContextConfig: getContextConfig(state),\n                getExternalSource: getExternalSource(state),\n                getHost: getHost(state),\n                getLocale: getLocale(state),\n                getVariantIdentificationToken: getVariantIdentificationToken(state),\n                getLoadError: getLoadError(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        (countries) => () => countries,\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CountryState = DEFAULT_STATE): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getExecutePaymentMethodCheckoutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (\n    state: CustomerStrategyState,\n) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        },\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        },\n    );\n\n    const getExecutePaymentMethodCheckoutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutError,\n        (executePaymentMethodCheckoutMethodId, executePaymentMethodCheckoutError) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return;\n                }\n\n                return executePaymentMethodCheckoutError;\n            },\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        },\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        },\n    );\n\n    const isExecutingPaymentMethodCheckout = createSelector(\n        (state: CustomerStrategyState) => state.statuses.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isExecutingPaymentMethodCheckout,\n        (executePaymentMethodCheckoutMethodId, isExecutingPaymentMethodCheckout) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return false;\n                }\n\n                return !!isExecutingPaymentMethodCheckout;\n            },\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: CustomerStrategyState = DEFAULT_STATE): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getExecutePaymentMethodCheckoutError: getExecutePaymentMethodCheckoutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (\n    state: GiftCertificateState,\n) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: GiftCertificateState = DEFAULT_STATE): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\nimport { createSelector } from '../../common/selector';\nimport { guard } from '../../common/utility';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getCardInstrumentOrThrow(instrumentId: string): CardInstrument;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway\n                ? `${paymentMethod.gateway}.${paymentMethod.id}`\n                : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        },\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) =>\n            (instrumentId: string) => {\n                const cards = values(supportedInstruments);\n\n                return instruments.find(\n                    (instrument): instrument is CardInstrument =>\n                        instrument.bigpayToken === instrumentId &&\n                        instrument.type === 'card' &&\n                        cards.some((card) => isMatch(instrument, card)),\n                );\n            },\n    );\n\n    const getCardInstrumentOrThrow = createSelector(\n        getCardInstrument,\n        (getCardInstrument) => (instrumentId: string) => {\n            return guard(\n                getCardInstrument(instrumentId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentInstrument),\n            );\n        },\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, (supportedProvider) =>\n                filter(\n                    instruments,\n                    (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                        return isMatch(instrument, supportedProvider);\n                    },\n                ),\n            );\n\n            return allSupportedInstruments;\n        },\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        },\n    );\n\n    return memoizeOne((state: InstrumentState = DEFAULT_STATE): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getCardInstrumentOrThrow: getCardInstrumentOrThrow(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.shippingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.billingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) => () => formFields ? formFields.customerAccount : [],\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    function processField(\n        field: FormField,\n        countries: Country[],\n        selectedCountry?: Country,\n    ): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(\n        field: FormField,\n        countries: Country[] = [],\n        country?: Country,\n    ): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((state: FormFieldsState = DEFAULT_STATE): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => () => paymentMethods,\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => (methodId: string, gatewayId?: string) => {\n            return gatewayId\n                ? find(paymentMethods, { id: methodId, gateway: gatewayId })\n                : find(paymentMethods, { id: methodId });\n        },\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        (getPaymentMethod) => (methodId: string, gatewayId?: string) => {\n            return guard(\n                getPaymentMethod(methodId, gatewayId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod),\n            );\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        },\n    );\n\n    return memoizeOne((state: PaymentMethodState = DEFAULT_STATE): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (\n    state: PaymentStrategyState,\n) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        },\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        },\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        },\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: PaymentStrategyState = DEFAULT_STATE): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { objectFlatten, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionResult, SearchArea } from './pickup-option';\nimport PickupOptionState, { DEFAULT_STATE } from './pickup-option-state';\n\nexport default interface PickupOptionSelector {\n    getPickupOptions(\n        consignmentId: string,\n        searchArea: SearchArea,\n    ): PickupOptionResult[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type PickupOptionSelectorFactory = (state: PickupOptionState) => PickupOptionSelector;\n\nexport function createPickupOptionSelectorFactory(): PickupOptionSelectorFactory {\n    const getPickupOptions = createSelector(\n        (state: PickupOptionState) => state.data,\n        (pickupOptions) => (consignmentId: string, searchArea: SearchArea) => {\n            if (!pickupOptions) {\n                return;\n            }\n\n            const flattenedParams = objectFlatten({ consignmentId, searchArea });\n            const sortedFlattenedParams = objectWithSortedKeys(flattenedParams);\n            const keyString = btoa(`${JSON.stringify(sortedFlattenedParams)}`);\n\n            return pickupOptions[keyString];\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PickupOptionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: PickupOptionState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: PickupOptionState = DEFAULT_STATE): PickupOptionSelector => {\n        return {\n            getPickupOptions: getPickupOptions(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (\n    state: ShippingCountryState,\n) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        (status) => () => !!status,\n    );\n\n    return memoizeOne((state: ShippingCountryState = DEFAULT_STATE): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (\n    state: ShippingStrategyState,\n) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        },\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        },\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        },\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: ShippingStrategyState = DEFAULT_STATE): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { AddressRequestBody, isAddressEqual } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentsOrThrow(): Consignment[];\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector,\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => consignments,\n    );\n\n    const getConsignmentsOrThrow = createSelector(getConsignments, (getConsignments) => () => {\n        return guard(\n            getConsignments(),\n            () => new MissingDataError(MissingDataErrorType.MissingConsignments),\n        );\n    });\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        },\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, (consignment) =>\n                isAddressEqual(consignment.shippingAddress, address),\n            );\n        },\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        (error) => () => error,\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[],\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                (item) => assignedLineItemIds.indexOf(item.id as string) < 0,\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        (updateError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        },\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        (deleteError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        },\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) =>\n            (address: AddressRequestBody) => {\n                const consignment = getConsignmentByAddress(address);\n\n                return consignment ? getUpdateError(consignment.id) : getCreateError();\n            },\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        (updateShippingOptionError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        (isLoadingShippingOptions) => () => isLoadingShippingOptions === true,\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        (isCreating) => () => isCreating === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        (isUpdating) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        },\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        (isDeleting) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        },\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        },\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        (isUpdatingShippingOption) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        },\n    );\n\n    return memoizeOne(\n        (state: ConsignmentState = DEFAULT_STATE, cart: CartSelector): ConsignmentSelector => {\n            return {\n                getConsignments: getConsignments(state),\n                getConsignmentsOrThrow: getConsignmentsOrThrow(state),\n                getConsignmentById: getConsignmentById(state),\n                getConsignmentByAddress: getConsignmentByAddress(state),\n                getShippingOption: getShippingOption(state),\n                getLoadError: getLoadError(state),\n                getCreateError: getCreateError(state),\n                getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n                getUnassignedItems: getUnassignedItems(state, { cart }),\n                getUpdateError: getUpdateError(state),\n                getDeleteError: getDeleteError(state),\n                getItemAssignmentError: getItemAssignmentError(state),\n                getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n                isLoading: isLoading(state),\n                isLoadingShippingOptions: isLoadingShippingOptions(state),\n                isCreating: isCreating(state),\n                isUpdating: isUpdating(state),\n                isDeleting: isDeleting(state),\n                isAssigningItems: isAssigningItems(state),\n                isUpdatingShippingOption: isUpdatingShippingOption(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector,\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) =>\n            billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) =>\n            consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) =>\n            giftCertificates.getGiftCertificates,\n        (\n                data,\n                getBillingAddress,\n                getCart,\n                getCustomer,\n                getConsignments,\n                getCoupons,\n                getGiftCertificates,\n            ) =>\n            () => {\n                const billingAddress = getBillingAddress();\n                const cart = getCart();\n                const customer = getCustomer();\n                const consignments = getConsignments() || [];\n                const coupons = getCoupons() || [];\n                const giftCertificates = getGiftCertificates() || [];\n\n                if (!data || !cart || !customer) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    cart,\n                    customer,\n                    consignments,\n                    coupons,\n                    giftCertificates,\n                };\n            },\n    );\n\n    const getCheckoutOrThrow = createSelector(getCheckout, (getCheckout) => () => {\n        return guard(\n            getCheckout(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckout),\n        );\n    });\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        (getCheckout) => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit\n                ? Math.max(grandTotal - storeCredit, 0)\n                : checkout.outstandingBalance;\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        (isExecutingSpamCheck) => () => isExecutingSpamCheck === true,\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        (isUpdating) => () => isUpdating === true,\n    );\n\n    return memoizeOne(\n        (\n            state: CheckoutState = DEFAULT_STATE,\n            billingAddress: BillingAddressSelector,\n            cart: CartSelector,\n            consignments: ConsignmentSelector,\n            coupons: CouponSelector,\n            customer: CustomerSelector,\n            giftCertificates: GiftCertificateSelector,\n        ): CheckoutSelector => {\n            return {\n                getCheckout: getCheckout(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getOutstandingBalance: getOutstandingBalance(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getLoadError: getLoadError(state),\n                getUpdateError: getUpdateError(state),\n                isExecutingSpamCheck: isExecutingSpamCheck(state),\n                isLoading: isLoading(state),\n                isUpdating: isUpdating(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    getPaymentId(methodId: string): string | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector,\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) =>\n            billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) =>\n            () => {\n                if (!data || !billingAddress) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    coupons,\n                };\n            },\n    );\n\n    const getOrderOrThrow = createSelector(getOrder, (getOrder) => () => {\n        return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n    });\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getPaymentId = createSelector(\n        (state: OrderState) => state.data?.payments,\n        (payments = []) =>\n            (methodId: string) => {\n                const currentPayment = payments.find(({ providerId }) => providerId === methodId);\n\n                return currentPayment?.paymentId;\n            },\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (\n            state: OrderState = DEFAULT_STATE,\n            billingAddress: BillingAddressSelector,\n            coupons: CouponSelector,\n        ): OrderSelector => {\n            return {\n                getOrder: getOrder(state, { billingAddress, coupons }),\n                getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n                getOrderMeta: getOrderMeta(state),\n                getLoadError: getLoadError(state),\n                getPaymentId: getPaymentId(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: StoreCreditState = DEFAULT_STATE): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SubscriptionsState = DEFAULT_STATE): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions,\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(createCheckoutStoreReducer(), initialState, {\n        actionTransformer,\n        stateTransformer,\n        ...options,\n    });\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach((type) => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register(\n        'invalid_payment_provider',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n    factory.register(\n        'payment_config_not_found',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n\n    return factory;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory,\n): (action: Subscribable<Action>) => Observable<Action> {\n    return (action$) =>\n        from(action$).pipe(\n            catchError<Action, never>((action) => {\n                if (action instanceof Error || action.payload instanceof Error) {\n                    throw action;\n                }\n\n                if (isResponse(action.payload)) {\n                    const message = action.payload.body && action.payload.body.detail;\n\n                    throw {\n                        ...action,\n                        payload: requestErrorFactory.createError(action.payload, message),\n                    };\n                }\n\n                throw action;\n            }),\n        );\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every((key) =>\n        Object.prototype.hasOwnProperty.call(object, key),\n    );\n}\n","import { Action, combineReducers, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport {\n    consignmentReducer,\n    pickupOptionReducer,\n    shippingCountryReducer,\n    shippingStrategyReducer,\n} from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        pickupOptions: pickupOptionReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/bigpay-client\");","// / <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        (state) => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        (state) => state.config.getStoreConfig(),\n    );\n\n    return paymentClient;\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(fn: TFunction): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize((store) => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>,\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","export interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nexport default function isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { filter } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    LoadPaymentMethodAction,\n    LoadPaymentMethodsAction,\n    PaymentMethodActionType,\n} from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport { isApplePayWindow } from './strategies/apple-pay';\n\nimport { PaymentMethod } from '.';\n\nconst APPLEPAYID = 'applepay';\n\nexport default class PaymentMethodActionCreator {\n    constructor(private _requestSender: PaymentMethodRequestSender) {}\n\n    loadPaymentMethods(\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cart = state.cart.getCartOrThrow();\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n                this._requestSender\n                    .loadPaymentMethods({\n                        ...options,\n                        params: { ...options?.params, cartId: cart.id },\n                    })\n                    .then((response) => {\n                        const meta = {\n                            deviceSessionId: response.headers['x-device-session-id'],\n                            sessionHash: response.headers['x-session-hash'],\n                        };\n                        const methods = response.body;\n                        const filteredMethods = Array.isArray(methods)\n                            ? this._filterApplePay(methods)\n                            : methods;\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                filteredMethods,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    @cachableAction\n    loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions & ActionOptions,\n    ): ThunkAction<LoadPaymentMethodAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(\n                    createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._requestSender\n                    .loadPaymentMethod(methodId, { ...options, params })\n                    .then((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodSucceeded,\n                                response.body,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodFailed,\n                                response,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _filterApplePay(methods: PaymentMethod[]): PaymentMethod[] {\n        return filter(methods, (method) => {\n            if (method.id === APPLEPAYID && !isApplePayWindow(window)) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadPaymentMethods({ timeout, params }: RequestOptions = {}): Promise<\n        Response<PaymentMethod[]>\n    > {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    loadPaymentMethod(\n        methodId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/script-loader\");","import { Action, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, Observable, of, throwError } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta,\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message || 'Unable to continue as a guest because the customer is already signed in.',\n        );\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport {\n    BillingAddressActionType,\n    ContinueAsGuestAction,\n    UpdateBillingAddressAction,\n} from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nimport { BillingAddressRequestSender } from '.';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator,\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options,\n                        );\n\n                        return createAction(\n                            BillingAddressActionType.ContinueAsGuestSucceeded,\n                            body,\n                        );\n                    }),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error),\n                    ),\n                ),\n                this._updateCustomerConsent(credentials, options),\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n                const billingAddress = state.billingAddress.getBillingAddress();\n\n                // If email is not present in the address provided by the client, then\n                // fall back to the stored email as it could have been set separately\n                // using a convenience method. We can't rely on billingAddress having\n                // an ID to consider that there's a preexisting email, as billingAddress\n                // object from Order doesn't have an ID.\n                const billingAddressRequestBody = {\n                    ...address,\n                    email:\n                        typeof address.email === 'undefined' && billingAddress\n                            ? billingAddress.email\n                            : address.email,\n                };\n\n                if (billingAddress && billingAddress.id) {\n                    billingAddressRequestBody.id = billingAddress.id;\n                }\n\n                this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                BillingAddressActionType.UpdateBillingAddressSucceeded,\n                                body,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                BillingAddressActionType.UpdateBillingAddressFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _updateCustomerConsent(\n        { email, acceptsAbandonedCartEmails, acceptsMarketingNewsletter }: GuestCredentials,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        if (\n            (acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)\n        ) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions(\n            {\n                email,\n                acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n                acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n            },\n            options,\n        );\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAddress(\n        checkoutId: string,\n        address: Partial<AddressRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: address,\n            params: DEFAULT_PARAMS,\n            headers,\n            timeout,\n        });\n    }\n\n    updateAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator,\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({\n                    ...options,\n                    useCache: true,\n                    params: { ...options?.params, checkoutId: id },\n                }),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                defer(() =>\n                    this._checkoutRequestSender\n                        .loadCheckout(id, options)\n                        .then(({ body }) =>\n                            createAction(CheckoutActionType.LoadCheckoutSucceeded, body),\n                        ),\n                ),\n            ),\n        ).pipe(\n            catchError((error) => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error)),\n        );\n    }\n\n    loadDefaultCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig(),\n                    this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                ),\n                defer(async () => {\n                    const state = store.getState();\n                    const context = state.config.getContextConfig();\n\n                    if (!context || !context.checkoutId) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                    }\n\n                    const { body } = await this._checkoutRequestSender.loadCheckout(\n                        context.checkoutId,\n                        options,\n                    );\n\n                    return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n                this._checkoutRequestSender\n                    .updateCheckout(checkout.id, body, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(CheckoutActionType.UpdateCheckoutSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response),\n                        );\n                    });\n            });\n    }\n\n    loadCurrentCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = [],\n): string {\n    return Array.isArray(includeDictionaryOrList)\n        ? joinIncludes([...baseIncludes, ...includeDictionaryOrList])\n        : mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean },\n): string {\n    const deletions = keys(pickBy(includesDictionary, (on) => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([...difference(baseIncludes, deletions), ...additions]);\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadCheckout(\n        id: string,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .get<Checkout>(url, {\n                params: {\n                    include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n                },\n                headers,\n                timeout,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    updateCheckout(\n        id: string,\n        body: CheckoutRequestBody,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(this._normalize(cartA), this._normalize(cartB));\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map((item) => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { ComparableCheckout } from '../../checkout';\nimport { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    data: { previous: ComparableCheckout; updated: ComparableCheckout };\n\n    constructor(previous: ComparableCheckout, updated: ComparableCheckout) {\n        super(\n            'An update to your shopping cart has been detected and your available shipping costs have been updated.',\n        );\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n        this.data = {\n            previous,\n            updated,\n        };\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { Cart, CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport type ComparableCheckout = Pick<\n    Checkout,\n    'outstandingBalance' | 'coupons' | 'giftCertificates'\n> & {\n    cart: Partial<Cart>;\n};\n\nexport default class CheckoutValidator {\n    constructor(private _checkoutRequestSender: CheckoutRequestSender) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options).then((response) => {\n            const comparator = new CartComparator();\n\n            if (\n                checkout.outstandingBalance === response.body.outstandingBalance &&\n                this._compareCoupons(checkout.coupons, response.body.coupons) &&\n                this._compareGiftCertificates(\n                    checkout.giftCertificates,\n                    response.body.giftCertificates,\n                ) &&\n                comparator.isEqual(checkout.cart, response.body.cart)\n            ) {\n                return;\n            }\n\n            throw new CartChangedError(\n                this._getComparableCheckout(checkout),\n                this._getComparableCheckout(response.body),\n            );\n        });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(\n        giftCertificatesA: GiftCertificate[],\n        giftCertificatesB: GiftCertificate[],\n    ): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n\n    private _getComparableCheckout(checkout: Checkout): ComparableCheckout {\n        const { cart, coupons, giftCertificates, outstandingBalance } = checkout;\n\n        return {\n            cart: {\n                cartAmount: cart.cartAmount,\n                currency: cart.currency,\n                lineItems: cart.lineItems,\n            },\n            coupons,\n            giftCertificates,\n            outstandingBalance,\n        };\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nimport { ConfigRequestSender } from '.';\n\nexport default class ConfigActionCreator {\n    constructor(private _configRequestSender: ConfigRequestSender) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender\n                .loadConfig(options)\n                .then((response) => {\n                    observer.next(\n                        createAction(ConfigActionType.LoadConfigSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutNotAvailableError } from '../checkout/errors';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadConfig({ timeout, params }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender\n            .get<Config>(url, {\n                timeout,\n                headers: {\n                    Accept: ContentType.JsonV1,\n                    'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    ...SDK_VERSION_HEADERS,\n                },\n                params,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n}\n","import { ExecuteSucceededAction, SpamProtectionAction } from './spam-protection-actions';\n\nexport default function isSpamProtectionExecuteSucceededAction(\n    action: SpamProtectionAction,\n): action is ExecuteSucceededAction {\n    const succeededAction = action as ExecuteSucceededAction;\n\n    return (\n        typeof succeededAction === 'object' &&\n        typeof succeededAction.payload === 'object' &&\n        typeof succeededAction.payload.token === 'string'\n    );\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    isSpamProtectionExecuteSucceededAction,\n    SpamProtectionActionCreator,\n} from '../spam-protection';\n\nimport CustomerAccountRequestBody, { CustomerAddressRequestBody } from './customer-account';\nimport {\n    CreateCustomerAction,\n    CreateCustomerAddressAction,\n    CustomerActionType,\n    SignInCustomerAction,\n    SignOutCustomerAction,\n} from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n    ) {}\n\n    createCustomer(\n        customerAccount: CustomerAccountRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<CreateCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const config = state.config.getStoreConfigOrThrow();\n            const { isStorefrontSpamProtectionEnabled } = config.checkoutSettings;\n\n            const createCustomer = (token?: string) =>\n                from(\n                    this._customerRequestSender.createAccount(\n                        { ...customerAccount, token },\n                        options,\n                    ),\n                ).pipe(\n                    switchMap(() =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.CreateCustomerSucceeded)),\n                        ),\n                    ),\n                );\n\n            return concat(\n                of(createAction(CustomerActionType.CreateCustomerRequested)),\n                isStorefrontSpamProtectionEnabled\n                    ? from(this._spamProtectionActionCreator.execute()(store)).pipe(\n                          switchMap((action) =>\n                              isSpamProtectionExecuteSucceededAction(action)\n                                  ? concat(of(action), createCustomer(action.payload?.token))\n                                  : of(action),\n                          ),\n                      )\n                    : createCustomer(),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.CreateCustomerFailed, error),\n                ),\n            );\n        };\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        options?: RequestOptions,\n    ): Observable<CreateCustomerAddressAction> {\n        return concat(\n            of(createAction(CustomerActionType.CreateCustomerAddressRequested)),\n            defer(async () => {\n                const { body } = await this._customerRequestSender.createAddress(\n                    customerAddress,\n                    options,\n                );\n\n                return createAction(CustomerActionType.CreateCustomerAddressSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(CustomerActionType.CreateCustomerAddressFailed, error),\n            ),\n        );\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CustomerActionType.SignInCustomerRequested)),\n                from(this._customerRequestSender.signInCustomer(credentials, options)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignInCustomerFailed, error),\n                ),\n            );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions,\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CustomerActionType.SignOutCustomerRequested)),\n                from(this._customerRequestSender.signOutCustomer(options)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(\n                                createAction(\n                                    CustomerActionType.SignOutCustomerSucceeded,\n                                    body.data,\n                                ),\n                            ),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignOutCustomerFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Customer from './customer';\nimport { CustomerAccountInternalRequestBody, CustomerAddressRequestBody } from './customer-account';\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAccount(\n        customerAccount: CustomerAccountInternalRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<{}>> {\n        const url = '/api/storefront/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAccount,\n        });\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Customer>> {\n        const url = `/api/storefront/customer-address`;\n\n        return this._requestSender.post<Customer>(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAddress,\n        });\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: credentials,\n        });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<\n        Response<InternalCustomerResponseBody>\n    > {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(private _formFieldsRequestSender: FormFieldsRequestSender) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((response) =>\n                throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { StandardError } from '../../error/errors';\n\nexport default class UnexpectedDetachmentError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the required element is unexpectedly detached from the page.',\n        );\n\n        this.name = 'UnexpectedDetachmentError';\n        this.type = 'unexpected_detachment';\n    }\n}\n","import { CancellablePromise } from '../utility';\n\nimport { UnexpectedDetachmentError } from './errors';\nimport { MutationObserverFactory } from './mutation-observer';\n\nexport default class DetachmentObserver {\n    constructor(private _mutationObserver: MutationObserverFactory) {}\n\n    async ensurePresence<T>(targets: Node[], promise: Promise<T>): Promise<T> {\n        const cancellable = new CancellablePromise(promise);\n\n        const observer = this._mutationObserver.create((mutationsList) => {\n            mutationsList.forEach((mutation) => {\n                const removedTargets = Array.from(mutation.removedNodes).filter((node) =>\n                    targets.some((target) => node === target || node.contains(target)),\n                );\n\n                if (removedTargets.length === 0) {\n                    return;\n                }\n\n                cancellable.cancel(new UnexpectedDetachmentError());\n            });\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n\n        try {\n            const output = await cancellable.promise;\n\n            observer.disconnect();\n\n            return output;\n        } catch (error) {\n            observer.disconnect();\n\n            throw error;\n        }\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new (callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(private _window: MutationObserverWindow = window as MutationObserverWindow) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port =\n        anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ? anchor.port : '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? `:${port}` : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType,\n): object is TEvent {\n    return object.type === type;\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<\n    TSuccessEvent extends IframeEvent,\n    TErrorEvent extends IframeEvent,\n> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(targetOrigin: string, private _targetWindow?: Window) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent>;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent> | void {\n        const targetWindow = this._targetWindow;\n\n        if (window === targetWindow) {\n            return;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result =\n            options &&\n            fromEvent<MessageEvent>(window, 'message')\n                .pipe(\n                    filter(\n                        (event) =>\n                            event.origin === this._targetOrigin &&\n                            isIframeEvent(event.data, event.data.type) &&\n                            [options.successType, options.errorType].indexOf(event.data.type) !==\n                                -1,\n                    ),\n                    map((event) => {\n                        if (options.errorType === event.data.type) {\n                            throw event.data;\n                        }\n\n                        return event.data;\n                    }),\n                    take(1),\n                )\n                .toPromise();\n\n        targetWindow.postMessage(event, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { appendWww, parseUrl } from '../url';\nimport { bindDecorator as bind } from '../utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigins: string[];\n\n    constructor(sourceOrigin: string) {\n        this._sourceOrigins = [\n            parseUrl(sourceOrigin).origin,\n            appendWww(parseUrl(sourceOrigin)).origin,\n        ];\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType]) => void,\n    ): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType]) => void,\n    ): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach((listener) => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if (\n            this._sourceOrigins.indexOf(event.origin) === -1 ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","import parseUrl from './parse-url';\nimport Url from './url';\n\nexport default function appendWww(url: Url): Url {\n    return parseUrl(\n        url.hostname.indexOf('www') === 0\n            ? url.href\n            : url.href.replace(url.hostname, `www.${url.hostname}`),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam protection challenge. Please try again.\");\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('Please complete our human verification challenge and try again.');\n\n        this.name = 'CardingProtectionChallengeNotCompletedError';\n        this.type = 'carding_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class CardingProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to verify that you are not a robot. Please try again.');\n\n        this.name = 'CardingProtectionFailedError';\n        this.type = 'carding_protection_failed';\n    }\n}\n","import { switchMap, take } from 'rxjs/operators';\n\nimport { RequestError } from '../common/error/errors';\nimport { PaymentAdditionalAction } from '../payment';\n\nimport {\n    CardingProtectionChallengeNotCompletedError,\n    CardingProtectionFailedError,\n    SpamProtectionChallengeNotCompletedError,\n} from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\n\nexport default class PaymentHumanVerificationHandler {\n    constructor(private _googleRecaptcha: GoogleRecaptcha) {}\n\n    handle(error: Error): Promise<PaymentAdditionalAction>;\n    handle(id: string, key: string): Promise<PaymentAdditionalAction>;\n    async handle(errorOrId: Error | string, key?: string): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this.handleWithRecaptchaSitekey(errorOrId, key);\n        }\n\n        return this.handleWithPaymentHumanVerificationRequestError(errorOrId);\n    }\n\n    private async handleWithPaymentHumanVerificationRequestError(\n        error: Error,\n    ): Promise<PaymentAdditionalAction> {\n        if (!this._isPaymentHumanVerificationRequest(error)) {\n            throw error;\n        }\n\n        await this._initialize(error.body.additional_action_required.data.key);\n\n        return this._performRecaptcha();\n    }\n\n    private async handleWithRecaptchaSitekey(\n        id: string,\n        key?: string,\n    ): Promise<PaymentAdditionalAction> {\n        if (id !== 'recaptcha_v2') {\n            throw Error('Human verification method is not supported.');\n        }\n\n        if (!key) {\n            throw Error('Recaptcha site key is missing.');\n        }\n\n        await this._initialize(key);\n\n        return this._performRecaptcha();\n    }\n\n    private _performRecaptcha(): Promise<PaymentAdditionalAction> {\n        return this._googleRecaptcha\n            .execute()\n            .pipe(take(1))\n            .pipe(\n                switchMap(async ({ error, token }) => {\n                    if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                        throw new CardingProtectionChallengeNotCompletedError();\n                    }\n\n                    if (error || !token) {\n                        throw new CardingProtectionFailedError();\n                    }\n\n                    return {\n                        type: 'recaptcha_v2_verification',\n                        data: {\n                            human_verification_token: token,\n                        },\n                    };\n                }),\n            )\n            .toPromise();\n    }\n\n    private _initialize(recaptchaSitekey: string): Promise<void> {\n        const cardingProtectionElementId = 'cardingProtectionContainer';\n\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\n\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\n        }\n\n        cardingProtectionElement = document.createElement('div');\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\n        document.body.appendChild(cardingProtectionElement);\n\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\n    }\n\n    private _isPaymentHumanVerificationRequest(error: Error): error is RequestError {\n        const { additional_action_required, status } = (error as RequestError).body || {};\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'recaptcha_v2_verification'\n        );\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport {\n    SpamProtectionChallengeNotCompletedError,\n    SpamProtectionFailedError,\n    SpamProtectionNotLoadedError,\n} from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nconst TIMEOUT = 7000;\nconst RETRY_INTERVAL = 250;\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (\n        recaptcha: ReCaptchaV2.ReCaptcha,\n        sitekey: string,\n        container: HTMLElement | null,\n    ) => Subject<RecaptchaResult>;\n    private _widgetId?: number;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory,\n    ) {\n        this._memoized = memoize(\n            (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n                const event$ = new Subject<RecaptchaResult>();\n\n                if (!container) {\n                    throw new Error();\n                }\n\n                this._widgetId = recaptcha.render(container.id, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(this._widgetId),\n                        });\n                        recaptcha.reset(this._widgetId);\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                return event$;\n            },\n            { isEqual: (a, b) => a === b },\n        );\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load().then((recaptcha) => {\n            if (recaptcha) {\n                this._event$ = this._memoized(\n                    recaptcha,\n                    sitekey,\n                    document.getElementById(containerId),\n                );\n                this._recaptcha = recaptcha;\n            }\n        });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        return defer(() => {\n            const event$ = this._event$;\n            const recaptcha = this._recaptcha;\n\n            if (!event$ || !recaptcha) {\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n            }\n\n            return defer(() => {\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\n            }).pipe(\n                retryWhen((errors) =>\n                    errors.pipe(\n                        delay(RETRY_INTERVAL),\n                        switchMap((error, index) =>\n                            index < MAX_RETRIES ? of(error) : throwError(error),\n                        ),\n                    ),\n                ),\n                switchMap((element) => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute(this._widgetId);\n\n                    return event$;\n                }),\n                catchError((error) => of({ error })),\n            );\n        });\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory\n            .create(() => {\n                // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n                if (container.style.visibility === 'hidden') {\n                    event.next({\n                        error: new SpamProtectionChallengeNotCompletedError(),\n                    });\n                }\n            })\n            .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha | undefined>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window,\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        const callbackName = 'initRecaptcha';\n        const params = [`onload=${callbackName}`, 'render=explicit'].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader\n                .loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch((error) => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader): GoogleRecaptcha {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory(),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed due to invalid configuration provided for the hosted payment form.',\n        );\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(public errors: HostedInputValidateErrorDataMap) {\n        super(\n            [\n                'Unable to proceed due to invalid user input values',\n                ...flatMap(values(errors), (fieldErrors) =>\n                    map(fieldErrors, ({ message }) => message),\n                ),\n            ].join('. '),\n        );\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n}\n\nexport type HostedFieldEvent =\n    | HostedFieldAttachEvent\n    | HostedFieldSubmitRequestEvent\n    | HostedFieldValidateRequestEvent;\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        origin?: string;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorData, PaymentErrorResponseBody } from '../../common/error';\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n}\n\n// Events\nexport type HostedInputEvent =\n    | HostedInputAttachSuccessEvent\n    | HostedInputAttachErrorEvent\n    | HostedInputBinChangeEvent\n    | HostedInputBlurEvent\n    | HostedInputChangeEvent\n    | HostedInputCardTypeChangeEvent\n    | HostedInputEnterEvent\n    | HostedInputFocusEvent\n    | HostedInputSubmitSuccessEvent\n    | HostedInputSubmitErrorEvent\n    | HostedInputValidateEvent;\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { DetachmentObserver } from '../common/dom';\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { parseUrl } from '../common/url';\nimport { CardInstrument } from '../payment/instrument';\n\nimport {\n    InvalidHostedFormConfigError,\n    InvalidHostedFormError,\n    InvalidHostedFormValueError,\n} from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputSubmitErrorEvent,\n    HostedInputSubmitSuccessEvent,\n    HostedInputValidateEvent,\n} from './iframe-content';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _detachmentObserver: DetachmentObserver,\n        private _cardInstrument?: CardInstrument,\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        this._iframe.src = `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}`;\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    async attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the provided container ID is not valid.',\n            );\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        const promise = fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post(\n                        {\n                            type: HostedFieldEventType.AttachRequested,\n                            payload: {\n                                accessibilityLabel: this._accessibilityLabel,\n                                cardInstrument: this._cardInstrument,\n                                fontUrls: this._getFontUrls(),\n                                placeholder: this._placeholder,\n                                styles: this._styles,\n                                origin: document.location.origin,\n                                type: this._type,\n                            },\n                        },\n                        {\n                            successType: HostedInputEventType.AttachSucceeded,\n                            errorType: HostedInputEventType.AttachFailed,\n                        },\n                    );\n                }),\n                take(1),\n            )\n            .toPromise();\n\n        await this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            const promise = this._eventPoster.post<HostedInputSubmitSuccessEvent>(\n                {\n                    type: HostedFieldEventType.SubmitRequested,\n                    payload: { fields, data },\n                },\n                {\n                    successType: HostedInputEventType.SubmitSucceeded,\n                    errorType: HostedInputEventType.SubmitFailed,\n                },\n            );\n\n            return await this._detachmentObserver.ensurePresence([this._iframe], promise);\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async validateForm(): Promise<void> {\n        const promise = this._eventPoster.post<HostedInputValidateEvent>(\n            {\n                type: HostedFieldEventType.ValidateRequested,\n            },\n            {\n                successType: HostedInputEventType.Validated,\n            },\n        );\n\n        const { payload } = await this._detachmentObserver.ensurePresence([this._iframe], promise);\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice\n            .call(links)\n            .filter((link) => parseUrl(link.href).hostname === hostname)\n            .filter((link) =>\n                values(this._styles)\n                    .map((style) => style && style.fontFamily)\n                    .filter((family): family is string => typeof family === 'string')\n                    .some((family) =>\n                        family\n                            .split(/,\\s/)\n                            .some((name) => link.href.indexOf(name.replace(' ', '+')) !== -1),\n                    ),\n            )\n            .map((link) => link.href);\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport { HostedForm as HostedFormInterface } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { OrderPaymentRequestBody } from '../order';\nimport { PaymentAdditionalAction } from '../payment';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport HostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport {\n    HostedInputEnterEvent,\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputSubmitSuccessEvent,\n} from './iframe-content';\n\ntype HostedFormEventCallbacks = Pick<\n    HostedFormOptions,\n    'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onEnter' | 'onValidate'\n>;\n\nexport default class HostedForm implements HostedFormInterface {\n    private _bin?: string;\n    private _cardType?: string;\n\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _payloadTransformer: HostedFormOrderDataTransformer,\n        private _eventCallbacks: HostedFormEventCallbacks,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {\n        const {\n            onBlur = noop,\n            onCardTypeChange = noop,\n            onFocus = noop,\n            onValidate = noop,\n        } = this._eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) =>\n            onBlur(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) =>\n            onCardTypeChange(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) =>\n            onFocus(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) =>\n            onValidate(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Entered, this._handleEnter);\n\n        this._eventListener.addListener(\n            HostedInputEventType.CardTypeChanged,\n            ({ payload }) => (this._cardType = payload.cardType),\n        );\n        this._eventListener.addListener(\n            HostedInputEventType.BinChanged,\n            ({ payload }) => (this._bin = payload.bin),\n        );\n    }\n\n    getBin(): string | undefined {\n        return this._bin;\n    }\n\n    getCardType(): string | undefined {\n        return this._cardType;\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map((otherField) => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach((field) => {\n            field.detach();\n        });\n    }\n\n    async submit(\n        payload: OrderPaymentRequestBody,\n        additionalActionData?: PaymentAdditionalAction,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalActionData),\n            );\n        } catch (error) {\n            const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalAction),\n            );\n        }\n    }\n\n    async validate(): Promise<void> {\n        return this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the payment form has no field defined.',\n            );\n        }\n\n        return field;\n    }\n\n    private _handleEnter: (event: HostedInputEnterEvent) => Promise<void> = async ({ payload }) => {\n        try {\n            await this.validate();\n        } catch (error) {\n            // Catch form validation error because we want to trigger `onEnter`\n            // irrespective of the validation result.\n            if (error.name !== 'InvalidHostedFormValueError') {\n                throw error;\n            }\n        }\n\n        const { onEnter = noop } = this._eventCallbacks;\n\n        onEnter(payload);\n    };\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { omit } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { OrderPaymentRequestBody } from '../order';\nimport {\n    HostedCreditCardInstrument,\n    isVaultedInstrument,\n    PaymentAdditionalAction,\n} from '../payment';\n\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport default class HostedFormOrderDataTransformer {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    transform(\n        payload: OrderPaymentRequestBody,\n        additionalAction?: PaymentAdditionalAction,\n    ): HostedFormOrderData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const order = state.order.getOrder();\n        const orderMeta = state.order.getOrderMeta();\n        const payment = omit(\n            payload.paymentData,\n            'ccExpiry',\n            'ccName',\n            'ccNumber',\n            'ccCvv',\n        ) as HostedCreditCardInstrument;\n        const paymentMethod = state.paymentMethods.getPaymentMethod(\n            payload.methodId,\n            payload.gatewayId,\n        );\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const authToken =\n            instrumentMeta && payment && isVaultedInstrument(payment)\n                ? `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment,\n            paymentMethod,\n            paymentMethodMeta,\n        };\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\nimport { pick } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { DetachmentObserver, MutationObserverFactory } from '../common/dom';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { CardInstrument } from '../payment/instrument';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport HostedFormOptions, {\n    HostedCardFieldOptionsMap,\n    HostedStoredCardFieldOptionsMap,\n} from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\n\nexport default class HostedFormFactory {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    create(host: string, options: HostedFormOptions): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields as HostedStoredCardFieldOptionsMap &\n                HostedCardFieldOptionsMap;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new DetachmentObserver(new MutationObserverFactory()),\n                    'instrumentId' in fieldOptions\n                        ? this._getCardInstrument(fieldOptions.instrumentId)\n                        : undefined,\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            new HostedFormOrderDataTransformer(this._store),\n            pick(options, 'onBlur', 'onEnter', 'onFocus', 'onCardTypeChange', 'onValidate'),\n            new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n        );\n    }\n\n    private _getCardInstrument(instrumentId: string): CardInstrument {\n        const {\n            instruments: { getCardInstrument },\n        } = this._store.getState();\n        const instrument = getCardInstrument(instrumentId);\n\n        if (!instrument) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\n        }\n\n        return instrument;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam check. Please try again.\");\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, Observer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport {\n    FinalizeOrderAction,\n    LoadOrderAction,\n    LoadOrderPaymentsAction,\n    OrderActionType,\n    SubmitOrderAction,\n} from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(\n                        createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response),\n                    );\n                });\n        });\n    }\n\n    loadCurrentOrder(\n        options?: RequestOptions,\n    ): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            defer(() => {\n                const orderId = this._getCurrentOrderId(store.getState());\n\n                if (!orderId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n                }\n\n                return this.loadOrder(orderId, options);\n            });\n    }\n\n    submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(OrderActionType.SubmitOrderRequested)),\n                defer(() => {\n                    const state = store.getState();\n                    const externalSource = state.config.getExternalSource();\n                    const variantIdentificationToken = state.config.getVariantIdentificationToken();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    if (checkout.shouldExecuteSpamCheck) {\n                        throw new SpamProtectionNotCompletedError();\n                    }\n\n                    return from(\n                        this._checkoutValidator.validate(checkout, options).then(() =>\n                            this._orderRequestSender.submitOrder(\n                                this._mapToOrderRequestBody(\n                                    payload ?? {},\n                                    checkout.id,\n                                    checkout.customerMessage,\n                                    externalSource,\n                                ),\n                                {\n                                    ...options,\n                                    headers: {\n                                        checkoutVariant: variantIdentificationToken,\n                                    },\n                                },\n                            ),\n                        ),\n                    ).pipe(\n                        switchMap((response) =>\n                            concat(\n                                // TODO: Remove once we can submit orders using storefront API\n                                this.loadOrder(response.body.data.order.orderId, options),\n                                of(\n                                    createAction(\n                                        OrderActionType.SubmitOrderSucceeded,\n                                        response.body.data,\n                                        { ...response.body.meta, token: response.headers.token },\n                                    ),\n                                ),\n                            ),\n                        ),\n                    );\n                }).pipe(\n                    catchError((error) =>\n                        throwErrorAction(OrderActionType.SubmitOrderFailed, error),\n                    ),\n                ),\n            );\n    }\n\n    finalizeOrder(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options)).pipe(\n                switchMap((response) =>\n                    concat(\n                        this.loadOrder(orderId, options),\n                        of(\n                            createAction(\n                                OrderActionType.FinalizeOrderSucceeded,\n                                response.body.data,\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ).pipe(catchError((error) => throwErrorAction(OrderActionType.FinalizeOrderFailed, error)));\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        cartId: string,\n        customerMessage: string,\n        externalSource?: string,\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                cartId,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            cartId,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error is thrown when the server detects inconsistency in cart data since it is last requested,\n * for example, product prices or eligible discounts have changed.\n */\nexport default class CartConsistencyError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Your checkout could not be processed because some details have changed. Please review your order and try again.',\n        );\n\n        this.name = 'CartConsistencyError';\n        this.type = 'cart_consistency';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Checkout prevents consumers from placing their orders when a merchant wishes\n * to be able to block transactions if the automated tax provider cannot be reached.\n */\nexport default class OrderTaxProviderUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The tax provider is unavailable.');\n\n        this.name = 'OrderTaxProviderUnavailableError';\n        this.type = 'tax_provider_unavailable';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { isNil, omitBy } from 'lodash';\n\nimport { CartConsistencyError } from '../cart/errors';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { OrderTaxProviderUnavailableError } from './errors';\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport interface SubmitOrderRequestOptions extends RequestOptions {\n    headers?: {\n        checkoutVariant?: string;\n    };\n}\n\nexport default class OrderRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadOrder(\n        orderId: number,\n        { timeout, params }: RequestOptions<OrderParams> = {},\n    ): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([...include, ...((params && params.include) || [])]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(\n        body?: InternalOrderRequestBody,\n        { headers, timeout }: SubmitOrderRequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender\n            .post<InternalOrderResponseBody>(url, {\n                body,\n                headers: omitBy(\n                    {\n                        'X-Checkout-Variant': headers && headers.checkoutVariant,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                    isNil,\n                ),\n                timeout,\n            })\n            .catch((error) => {\n                if (error.body.type === 'tax_provider_unavailable') {\n                    throw new OrderTaxProviderUnavailableError();\n                }\n\n                if (error.body.type === 'cart_has_changed') {\n                    throw new CartConsistencyError();\n                }\n\n                throw error;\n            });\n    }\n\n    finalizeOrder(\n        orderId: number,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport Payment, {\n    FormattedHostedInstrument,\n    FormattedPayload,\n    FormattedVaultedInstrument,\n} from './payment';\nimport {\n    InitializeOffsitePaymentAction,\n    PaymentActionType,\n    SubmitPaymentAction,\n} from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\ninterface InitializeOffsitePaymentSettings {\n    methodId: string;\n    gatewayId?: string;\n    instrumentId?: string;\n    target?: string;\n    promise?: Promise<undefined>;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n\ntype InitializeOffsitePayment = (\n    settings: InitializeOffsitePaymentSettings,\n) => ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors>;\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(PaymentActionType.SubmitPaymentRequested)),\n                defer(async () => {\n                    try {\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(payment, store.getState()),\n                        );\n                    } catch (error) {\n                        const additionalAction = await this._paymentHumanVerificationHandler.handle(\n                            error,\n                        );\n\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(\n                                { ...payment, additionalAction },\n                                store.getState(),\n                            ),\n                        );\n                    }\n                }).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._orderActionCreator.loadCurrentOrder()(store),\n                            of(createAction(PaymentActionType.SubmitPaymentSucceeded, body)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.SubmitPaymentFailed, error),\n                ),\n            );\n    }\n\n    initializeOffsitePayment: InitializeOffsitePayment = ({\n        methodId,\n        gatewayId,\n        instrumentId,\n        target,\n        promise,\n        shouldSaveInstrument,\n        shouldSetAsDefaultInstrument,\n    }) => {\n        return (store) => {\n            let paymentData:\n                | FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument>\n                | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = {\n                    formattedPayload: {\n                        vault_payment_instrument: shouldSaveInstrument,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                };\n            }\n\n            const payload = this._paymentRequestTransformer.transform(\n                { gatewayId, methodId, paymentData },\n                store.getState(),\n            );\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race(\n                    [\n                        this._paymentRequestSender.initializeOffsitePayment(payload, target),\n                        promise,\n                    ].filter(Boolean),\n                ).then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded)),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error),\n                ),\n            );\n        };\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @class\n     * @param {BigpayClient} client\n     */\n    constructor(private _client: any) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { BillingAddress, isBillingAddressLike } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[],\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","enum CheckoutButtonMethodType {\n    APPLEPAY = \"applepay\",\n    AMAZON_PAY_V2 = \"amazonpay\",\n    BRAINTREE_PAYPAL = \"braintreepaypal\",\n    BRAINTREE_VENMO = \"braintreevenmo\",\n    BRAINTREE_PAYPAL_CREDIT = \"braintreepaypalcredit\",\n    GOOGLEPAY_ADYENV2 = \"googlepayadyenv2\",\n    GOOGLEPAY_ADYENV3 = \"googlepayadyenv3\",\n    GOOGLEPAY_AUTHORIZENET = \"googlepayauthorizenet\",\n    GOOGLEPAY_BNZ = \"googlepaybnz\",\n    GOOGLEPAY_BRAINTREE = \"googlepaybraintree\",\n    GOOGLEPAY_CHECKOUTCOM = \"googlepaycheckoutcom\",\n    GOOGLEPAY_CYBERSOURCEV2 = \"googlepaycybersourcev2\",\n    GOOGLEPAY_ORBITAL = \"googlepayorbital\",\n    GOOGLEPAY_STRIPE = \"googlepaystripe\",\n    GOOGLEPAY_STRIPEUPE = \"googlepaystripeupe\",\n    MASTERPASS = \"masterpass\",\n    PAYPALEXPRESS = \"paypalexpress\",\n    PAYPALCOMMERCE = \"paypalcommerce\",\n    PAYPALCOMMERCE_CREDIT = \"paypalcommercecredit\",\n    PAYPALCOMMERCE_APMS = \"paypalcommercealternativemethods\",\n    PAYPALCOMMERCE_INLINE = \"paypalcommerceinline\",\n    PAYPALCOMMERCE_VENMO = \"paypalcommercevenmo\"\n}\nexport default CheckoutButtonMethodType;\n\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(\n    giftCertificate: GiftCertificate,\n): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>).reduce(\n        (result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey,\n                );\n            }),\n        ],\n        [] as InternalLineItem[],\n    );\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number,\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item[idKey] as string | number,\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map((option) => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(\n                checkout.cart.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(\n                checkout.giftCertificates,\n                (sum, certificate) => {\n                    return sum + certificate.used;\n                },\n                0,\n            ),\n            appliedGiftCertificates: keyBy(\n                checkout.giftCertificates.map(mapToInternalGiftCertificate),\n                'code',\n            ),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                checkout.shippingCostBeforeDiscount,\n            ),\n            required: some(\n                checkout.cart.lineItems.physicalItems,\n                (lineItem) => lineItem.isShippingRequired,\n            ),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(\n    promotions?: Promotion[],\n): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach((promotion) => {\n        (promotion.banners || []).forEach((banner) => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport InternalCustomer from './internal-customer';\n\nimport { Customer } from '.';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(\n    customer: Customer,\n    billingAddress: BillingAddress,\n): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map((address) => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear =\n            year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"card-validator\");","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter((gapIndex) => unformattedValue.length > gapIndex)\n            .reduce(\n                (output, gapIndex, index) =>\n                    [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(\n                        NUMBER_SEPARATOR,\n                    ),\n                unformattedValue,\n            );\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { LineItem, mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, {\n    InternalGiftCertificateList,\n    InternalIncompleteOrder,\n    InternalOrderPayment,\n    InternalSocialDataList,\n} from './internal-order';\nimport Order, {\n    GatewayOrderPayment,\n    GiftCertificateOrderPayment,\n    OrderPayment,\n    OrderPayments,\n} from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(\n    order: Order,\n    orderMeta: OrderMetaState = {},\n): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(\n                order.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                order.shippingCostBeforeDiscount,\n            ),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment\n            ? {}\n            : {\n                  id: payment.providerId,\n                  gateway: payment.gatewayId,\n                  status: mapToInternalPaymentStatus(payment.detail.step),\n              },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, {\n        providerId: 'giftcertificate',\n    }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(\n            items.map((item) => ({\n                code: item.detail.code,\n                discountedAmount: item.amount,\n                remainingBalance: item.detail.remaining,\n                giftCertificate: {\n                    balance: item.amount + item.detail.remaining,\n                    code: item.detail.code,\n                    purchaseDate: '',\n                },\n            })),\n            'code',\n        ),\n    };\n}\n\nfunction mapToInternalOrderPayment(\n    payments?: OrderPayments,\n    payment: InternalOrderPayment = {},\n): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(\n    order: Order,\n): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [...order.lineItems.physicalItems, ...order.lineItems.digitalItems];\n\n    items.forEach((item) => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item =\n            lineItem.socialMedia && find(lineItem.socialMedia, (item) => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(\n    option: ShippingOption,\n    isSelected: boolean,\n): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { pick } from 'lodash';\n\nimport { Address, mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { CheckoutButtonMethodType } from '../checkout-buttons/strategies';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport {\n    CardExpiryFormatter,\n    CardNumberFormatter,\n    HostedInputValues,\n} from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, {\n    HostedCreditCardInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n} from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(\n            payment.methodId,\n            payment.gatewayId,\n        );\n        const shippingAddress = this._mapShippingAddress(checkoutState, paymentMethod);\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer =\n            customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken =\n            instrumentMeta &&\n            payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) ||\n                isFormattedVaultedInstrument(payment.paymentData))\n                ? `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(\n        values: HostedInputValues,\n        data: HostedFormOrderData,\n        nonce: string,\n    ): PaymentRequestBody {\n        const {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment = {},\n            paymentMethod,\n            paymentMethodMeta,\n        } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer:\n                order &&\n                order.billingAddress &&\n                checkout &&\n                mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress:\n                order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress:\n                shippingAddress &&\n                checkout &&\n                mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store:\n                config &&\n                pick(config.storeConfig.storeProfile, [\n                    'storeHash',\n                    'storeId',\n                    'storeLanguage',\n                    'storeName',\n                ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        if (paymentMethod.id === CheckoutButtonMethodType.BRAINTREE_VENMO) {\n            return { ...paymentMethod, id: CheckoutButtonMethodType.BRAINTREE_PAYPAL };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string,\n    ): PaymentInstrument {\n        return 'instrumentId' in payment\n            ? {\n                  ...payment,\n                  ccCvv: values.cardCodeVerification,\n                  ccNumber:\n                      values.cardNumberVerification &&\n                      this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                  hostedFormNonce: nonce,\n              }\n            : {\n                  ...payment,\n                  ccCvv: values.cardCode,\n                  ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                  ccName: values.cardName || '',\n                  ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                  hostedFormNonce: nonce,\n              };\n    }\n\n    private _mapShippingAddress(\n        checkoutState: InternalCheckoutSelectors,\n        paymentMethod?: PaymentMethod,\n    ): Address | undefined {\n        if (paymentMethod) {\n            const isBopisEnabled = paymentMethod.initializationData?.bopis?.enabled;\n            const requiredAddress = paymentMethod.initializationData?.bopis?.requiredAddress;\n            const consignments = checkoutState.consignments.getConsignments();\n            const isPickup = consignments?.every((consignment) => consignment.selectedPickupOption);\n\n            if (isBopisEnabled && isPickup && requiredAddress === 'none') {\n                return undefined;\n            }\n        }\n\n        return checkoutState.shippingAddress.getShippingAddress();\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport {\n    CheckoutIncludes,\n    CheckoutParams,\n    CheckoutRequestSender,\n    InternalCheckoutSelectors,\n    ReadableCheckoutStore,\n} from '../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentAssignmentBaseRequestBodyWithAddress,\n    ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentsRequestBody,\n    ConsignmentUpdateRequestBody,\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender,\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart(),\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment(\n                {\n                    id: existingConsignment.id,\n                    address,\n                    lineItems,\n                },\n                options,\n            )(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            return this._createOrUpdateConsignment(\n                {\n                    id: existingConsignment && existingConsignment.id,\n                    address,\n                    lineItems: this._addLineItems(\n                        consignment.lineItems,\n                        existingConsignment,\n                        state.cart.getCart(),\n                    ),\n                },\n                options,\n            )(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n                const consignments = state.consignments.getConsignments();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!consignments || !consignments.length) {\n                    throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n                }\n\n                const consignmentUpdateBody = {\n                    id: consignments[0].id,\n                    shippingOptionId: id,\n                };\n\n                const consignmentMeta = {\n                    id: consignments[0].id,\n                };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignmentUpdateBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    loadShippingOptions(\n        options?: RequestOptions,\n    ): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n                this._checkoutRequestSender\n                    .loadCheckout(checkout.id, {\n                        ...options,\n                        params: {\n                            include: [CheckoutIncludes.AvailableShippingOptions],\n                        },\n                    })\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.LoadShippingOptionsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n                this._consignmentRequestSender\n                    .createConsignments(checkout.id, consignments, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.CreateConsignmentsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n                const consignmentMeta = { id: consignmentId };\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.DeleteConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .deleteConsignment(checkout.id, consignmentId, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.DeleteConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.DeleteConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        address: AddressRequestBody,\n        store: ReadableCheckoutStore,\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            address,\n            lineItems: [...physicalItems, ...customItems].map((item) => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart)\n            .map((existingItem) => {\n                const sharedItem = find(\n                    lineItems,\n                    (lineItem) => lineItem.itemId === existingItem.itemId,\n                );\n\n                return {\n                    ...existingItem,\n                    quantity: sharedItem\n                        ? existingItem.quantity - sharedItem.quantity\n                        : existingItem.quantity,\n                };\n            })\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map((itemId) => {\n            const item = find(cart.lineItems.physicalItems, (lineItem) => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody,\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n\n    private _consignmentHasAddress(\n        consignment:\n            | ConsignmentAssignmentBaseRequestBodyWithAddress\n            | ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ): consignment is ConsignmentAssignmentBaseRequestBodyWithAddress {\n        return typeof consignment === 'object' && 'address' in consignment;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n    'consignments.availableShippingOptions',\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'promotions.banners',\n];\n\nexport default class ConsignmentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\nimport isSpamProtectionExecuteSucceededAction from './is-spam-protection-succeeded-action';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha,\n        private _requestSender: SpamProtectionRequestSender,\n    ) {}\n\n    initialize(\n        options?: SpamProtectionOptions,\n    ): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\n                defer(async () => {\n                    const spamProtectionElementId = options\n                        ? options.containerId\n                        : 'spamProtectionContainer';\n\n                    if (!options && !document.getElementById(spamProtectionElementId)) {\n                        const spamProtectionElement = document.createElement('div');\n\n                        spamProtectionElement.setAttribute('id', spamProtectionElementId);\n                        document.body.appendChild(spamProtectionElement);\n                    }\n\n                    const state = store.getState();\n                    const storeConfig = state.config.getStoreConfigOrThrow();\n                    const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n                    await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\n\n                    return createAction(SpamProtectionActionType.InitializeSucceeded);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.InitializeFailed, error),\n                ),\n            );\n    }\n\n    verifyCheckoutSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return (store) =>\n            defer(() => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return concat(\n                    of(createAction(SpamProtectionActionType.VerifyCheckoutRequested)),\n                    from(this.execute()(store)).pipe(\n                        switchMap((action) => {\n                            if (\n                                !isSpamProtectionExecuteSucceededAction(action) ||\n                                !action.payload\n                            ) {\n                                return of(action);\n                            }\n\n                            return from(\n                                this._requestSender.validate(checkout.id, action.payload.token),\n                            ).pipe(\n                                switchMap(({ body }) =>\n                                    concat(\n                                        of(action),\n                                        of(\n                                            createAction(\n                                                SpamProtectionActionType.VerifyCheckoutSucceeded,\n                                                body,\n                                            ),\n                                        ),\n                                    ),\n                                ),\n                            );\n                        }),\n                    ),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(SpamProtectionActionType.VerifyCheckoutFailed, error),\n                    ),\n                );\n            });\n    }\n\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.ExecuteRequested)),\n                this.initialize()(store),\n                this._googleRecaptcha\n                    .execute()\n                    .pipe(take(1))\n                    .pipe(\n                        switchMap(async ({ error, token }) => {\n                            if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                                throw error;\n                            }\n\n                            if (error || !token) {\n                                throw new SpamProtectionFailedError();\n                            }\n\n                            return createAction(SpamProtectionActionType.ExecuteSucceeded, {\n                                token,\n                            });\n                        }),\n                    ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.ExecuteFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class SpamProtectionRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    validate(\n        checkoutId: string,\n        token: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: { token }, headers, timeout });\n    }\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    Subscriptions,\n    SubscriptionsActionType,\n    SubscriptionsRequestSender,\n    UpdateSubscriptionsAction,\n} from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(private _subscriptionsRequestSender: SubscriptionsRequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(\n                    subscriptions,\n                    options,\n                );\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    SubscriptionsActionType.UpdateSubscriptionsFailed,\n                    new UpdateSubscriptionsError(error),\n                ),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        // Fixed in later versions of typescript https://github.com/microsoft/TypeScript/issues/36390\n        return (input as any[]).map((value: T[keyof T]) => cloneDeepSafe(value)) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>).reduce(\n            (result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }),\n            {},\n        ) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ? cloneDeep(input) : input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { cloneResult as clone } from '../common/utility';\n\nexport default function createPaymentIntegrationSelectors({\n    billingAddress: { getBillingAddress, getBillingAddressOrThrow },\n    cart: { getCart, getCartOrThrow },\n    checkout: { getCheckout, getCheckoutOrThrow },\n    config: { getHost, getLocale, getStoreConfig, getStoreConfigOrThrow },\n    consignments: { getConsignments, getConsignmentsOrThrow },\n    customer: { getCustomer, getCustomerOrThrow },\n    instruments: { getCardInstrument, getCardInstrumentOrThrow },\n    order: { getOrder, getOrderOrThrow },\n    payment: {\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        isPaymentDataRequired,\n    },\n    paymentMethods: { getPaymentMethod, getPaymentMethodOrThrow },\n    paymentStrategies: { isInitialized: isPaymentMethodInitialized },\n    shippingAddress: {\n        getShippingAddress,\n        getShippingAddressOrThrow,\n        getShippingAddresses,\n        getShippingAddressesOrThrow,\n    },\n}: InternalCheckoutSelectors): PaymentIntegrationSelectors {\n    return {\n        getHost: clone(getHost),\n        getLocale: clone(getLocale),\n        getBillingAddress: clone(getBillingAddress),\n        getBillingAddressOrThrow: clone(getBillingAddressOrThrow),\n        getCart: clone(getCart),\n        getCartOrThrow: clone(getCartOrThrow),\n        getCheckout: clone(getCheckout),\n        getCheckoutOrThrow: clone(getCheckoutOrThrow),\n        getStoreConfig: clone(getStoreConfig),\n        getStoreConfigOrThrow: clone(getStoreConfigOrThrow),\n        getConsignments: clone(getConsignments),\n        getConsignmentsOrThrow: clone(getConsignmentsOrThrow),\n        getCustomer: clone(getCustomer),\n        getCustomerOrThrow: clone(getCustomerOrThrow),\n        getCardInstrument: clone(getCardInstrument),\n        getCardInstrumentOrThrow: clone(getCardInstrumentOrThrow),\n        getOrder: clone(getOrder),\n        getOrderOrThrow: clone(getOrderOrThrow),\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        getPaymentMethod: clone(getPaymentMethod),\n        getPaymentMethodOrThrow: clone(getPaymentMethodOrThrow),\n        getShippingAddress: clone(getShippingAddress),\n        getShippingAddressOrThrow: clone(getShippingAddressOrThrow),\n        getShippingAddresses: clone(getShippingAddresses),\n        getShippingAddressesOrThrow: clone(getShippingAddressesOrThrow),\n        isPaymentDataRequired,\n        isPaymentMethodInitialized,\n    };\n}\n","import {\n    BillingAddressRequestBody,\n    HostedForm,\n    HostedFormOptions,\n    InitializeOffsitePaymentConfig,\n    OrderRequestBody,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    RequestOptions,\n    ShippingAddressRequestBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator } from '../billing';\nimport { CheckoutActionCreator, CheckoutStore } from '../checkout';\nimport { DataStoreProjection } from '../common/data-store';\nimport { CustomerActionCreator, CustomerCredentials } from '../customer';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator } from '../order';\nimport PaymentActionCreator from '../payment/payment-action-creator';\nimport PaymentMethodActionCreator from '../payment/payment-method-action-creator';\nimport { ConsignmentActionCreator } from '../shipping';\n\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default class DefaultPaymentIntegrationService implements PaymentIntegrationService {\n    private _storeProjection: DataStoreProjection<PaymentIntegrationSelectors>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _storeProjectionFactory: PaymentIntegrationStoreProjectionFactory,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _hostedFormFactory: HostedFormFactory,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _customerActionCreator: CustomerActionCreator,\n    ) {\n        this._storeProjection = this._storeProjectionFactory.create(this._store);\n    }\n\n    createHostedForm(host: string, options: HostedFormOptions): HostedForm {\n        return this._hostedFormFactory.create(host, options);\n    }\n\n    subscribe(\n        subscriber: (state: PaymentIntegrationSelectors) => void,\n        ...filters: Array<(state: PaymentIntegrationSelectors) => unknown>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    getState(): PaymentIntegrationSelectors {\n        return this._storeProjection.getState();\n    }\n\n    async initializeOffsitePayment(\n        initializeOffsitePaymentConfig: InitializeOffsitePaymentConfig,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentActionCreator.initializeOffsitePayment(initializeOffsitePaymentConfig),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout());\n\n        return this._storeProjection.getState();\n    }\n\n    async loadDefaultCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethod(methodId: string): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitPayment(payment: Payment): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n\n        return this._storeProjection.getState();\n    }\n\n    async finalizeOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        const {\n            order: { getOrderOrThrow },\n        } = this._store.getState();\n\n        await this._store.dispatch(\n            this._orderActionCreator.finalizeOrder(getOrderOrThrow().orderId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async updateBillingAddress(\n        payload: BillingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async updateShippingAddress(\n        payload: ShippingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(id, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signOutCustomer(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n\n        return this._storeProjection.getState();\n    }\n}\n","import { Action, createAction, createDataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState>\n    extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: ReadableDataStore<TState>,\n    stateTransformer: (state: TState) => TTransformedState,\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<\n        TState | undefined,\n        SynchronizeAction<TState>,\n        TTransformedState\n    >(\n        (state, action) =>\n            action.type === ProjectionActionType.Synchronize ? action.payload : state,\n        store.getState(),\n        { stateTransformer },\n    );\n\n    store.subscribe(\n        (state) => {\n            projection.dispatch(\n                createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>,\n            );\n        },\n        { initial: false },\n    );\n\n    return projection;\n}\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\n\nexport default class PaymentIntegrationStoreProjectionFactory {\n    constructor(\n        private _transformSelectors: (\n            selectors: InternalCheckoutSelectors,\n        ) => PaymentIntegrationSelectors,\n    ) {}\n\n    create(store: ReadableCheckoutStore): DataStoreProjection<PaymentIntegrationSelectors> {\n        return createDataStoreProjection(store, this._transformSelectors);\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"shallowequal\");","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport {\n    ChildCacheKeyMap,\n    IntermediateCacheKeyMap,\n    isRootCacheKeyMap,\n    isTerminalCacheKeyMap,\n    RootCacheKeyMap,\n    TerminalCacheKeyMap,\n} from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if (\n                    (args.length === 0 || index === args.length - 1) &&\n                    isTerminalCacheKeyMap(map)\n                ) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(\n        parent: RootCacheKeyMap | IntermediateCacheKeyMap,\n        args: any[],\n    ): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(index === -1 ? 0 : index, index === -1 ? 0 : 1, recentlyUsedMap);\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, CacheKeyResolver, isEqual, isPrivate } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            selectorMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: (key) => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(\n    selectors: InternalCheckoutSelectors,\n): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator,\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe((state) => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            (state) => state.checkoutButton.getState(),\n            ...filters.map(\n                (filter) => (state: InternalCheckoutSelectors) =>\n                    filter(createCheckoutButtonSelectors(state)),\n            ),\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId)\n            ? [options.containerId]\n            : setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map((containerId) => {\n                const action = this._buttonStrategyActionCreator.initialize({\n                    ...options,\n                    containerId,\n                });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            }),\n        ).then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId }).then(() => this.getState());\n    }\n}\n","/* eslint-disable no-useless-escape */\nexport default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(\n            `Unable to find any element with the specified selector: ${selector}`,\n        );\n    }\n\n    return Array.prototype.slice.call(containers).map((container: HTMLElement) => {\n        if (!container.id) {\n            container.id = uniqueId(idPrefix);\n        }\n\n        return container.id;\n    });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutButtonStrategy as CheckoutButtonStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport {\n    CheckoutButtonActionType,\n    DeinitializeButtonAction,\n    InitializeButtonAction,\n} from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonRegistryV2 from './checkout-button-strategy-registry-v2';\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _registryV2: CheckoutButtonRegistryV2,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n    ) {}\n\n    initialize(\n        options: CheckoutButtonInitializeOptions,\n    ): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = {\n                methodId: options.methodId,\n                containerId: options.containerId,\n            };\n\n            if (\n                store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)\n            ) {\n                return empty();\n            }\n\n            const paymentMethodRequestParams = options.currencyCode\n                ? { params: { currencyCode: options.currencyCode } }\n                : {};\n\n            const paymentMethodRequestOptions = {\n                ...paymentMethodRequestParams,\n                timeout: options.timeout,\n                useCache: true,\n            };\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.InitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                this._paymentMethodActionCreator.loadPaymentMethod(\n                    options.methodId,\n                    paymentMethodRequestOptions,\n                )(store),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .initialize(options)\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.InitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta),\n                ),\n            );\n        };\n    }\n\n    deinitialize(\n        options: CheckoutButtonOptions,\n    ): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.DeinitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .deinitialize()\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.DeinitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(\n                        CheckoutButtonActionType.DeinitializeButtonFailed,\n                        error,\n                        meta,\n                    ),\n                ),\n            );\n        };\n    }\n\n    private _getStrategy(\n        methodId: CheckoutButtonMethodType,\n    ): CheckoutButtonStrategy | CheckoutButtonStrategyV2 {\n        let strategy: CheckoutButtonStrategy | CheckoutButtonStrategyV2;\n\n        try {\n            strategy = this._registryV2.get({ id: methodId });\n        } catch {\n            strategy = this._registry.get(methodId);\n        }\n\n        return strategy;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport BuyNowCartRequestBody from './buy-now-cart-request-body';\nimport Cart from './cart';\n\nexport default class CartRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createBuyNowCart(\n        body: BuyNowCartRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Cart>> {\n        const url = '/api/storefront/carts';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Factory from './factory';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _defaultToken: string;\n    private _useFallback: string | boolean;\n    private _tokenResolver: (token: string, registeredTokens: string[]) => string | undefined;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._defaultToken = options?.defaultToken ?? 'default';\n        this._useFallback = options?.useFallback ?? true;\n        this._tokenResolver = options?.tokenResolver ?? ((token) => token);\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._defaultToken,\n                cacheToken || token || this._defaultToken,\n            );\n        } catch (error) {\n            if (!this._useFallback) {\n                throw error;\n            }\n\n            return this._getInstance(this._defaultToken, cacheToken || this._defaultToken);\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const resolvedToken = this._tokenResolver(token, Object.keys(this._factories));\n            const factory = resolvedToken && this._factories[resolvedToken];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport interface RegistryOptions {\n    defaultToken?: string;\n    useFallback?: boolean;\n    tokenResolver?(token: string, registeredTokens: string[]): string | undefined;\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n","import { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    Pay: AmazonPayV2Client;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: {\n        createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n    }): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\ninterface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport enum AmazonPayV2Regions {\n    de = 'eu',\n    jp = 'fe',\n    uk = 'eu',\n    us = 'na',\n}\n\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n}\n","import { PaymentMethod } from '../..';\nimport { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\nimport { getShippableItemsCount } from '../../../../../core/src/shipping';\nimport { guard } from '../../../../src/common/utility';\nimport { StoreProfile } from '../../../../src/config';\nimport { CheckoutSettings } from '../../../../src/config/config';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\n\nimport {\n    AmazonPayV2Button,\n    AmazonPayV2ButtonColor,\n    AmazonPayV2ButtonParameters,\n    AmazonPayV2ButtonRenderingOptions,\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2NewButtonParams,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n    AmazonPayV2SDK,\n} from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private _amazonPayV2SDK?: AmazonPayV2SDK;\n    private _buttonParentContainer?: HTMLDivElement;\n    private _amazonPayV2Button?: AmazonPayV2Button;\n\n    constructor(private _amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\n\n    async initialize(paymentMethod: PaymentMethod): Promise<void> {\n        this._amazonPayV2SDK = await this._amazonPayV2ScriptLoader.load(paymentMethod);\n        this._buttonParentContainer =\n            this._buttonParentContainer || this._createAmazonPayButtonParentContainer();\n    }\n\n    deinitialize(): Promise<void> {\n        this._amazonPayV2Button = undefined;\n        this._buttonParentContainer?.remove();\n        this._buttonParentContainer = undefined;\n        this._amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n    ): void {\n        this._getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this._amazonPayV2Button = this._getAmazonPayV2SDK().Pay.renderButton(\n            `#${containerId}`,\n            options,\n        );\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>): void {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        const requestConfig = {\n            createCheckoutSessionConfig: this._isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n        };\n\n        this._getAmazonPayV2Button().onClick(() =>\n            this._getAmazonPayV2Button().initCheckout(requestConfig),\n        );\n    }\n\n    async signout(): Promise<void> {\n        if (this._amazonPayV2SDK) {\n            this._amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render the Amazon Pay button to an invalid HTML container element.',\n            );\n        }\n\n        const { id: parentContainerId } = container.appendChild(this._getButtonParentContainer());\n\n        const amazonPayV2ButtonOptions =\n            options ??\n            this._getAmazonPayV2ButtonOptions(\n                checkoutState,\n                methodId,\n                placement,\n                decoupleCheckoutInitiation,\n            );\n\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\n\n        return this._getButtonParentContainer();\n    }\n\n    /**\n     * @internal\n     */\n    isPh4Enabled(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\n\n        if (isPh4Enabled && isPh4UsOnly) {\n            return storeCountryCode === 'US';\n        }\n\n        return isPh4Enabled;\n    }\n\n    private _createAmazonPayButtonParentContainer(): HTMLDivElement {\n        const uid = Math.random().toString(16).substr(-4);\n        const parentContainer = document.createElement('div');\n\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\n\n        return parentContainer;\n    }\n\n    private _getAmazonPayV2ButtonOptions(\n        {\n            cart: { getCart },\n            checkout: { getCheckout },\n            config: { getStoreConfigOrThrow },\n            paymentMethods: { getPaymentMethodOrThrow },\n        }: InternalCheckoutSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false,\n    ): AmazonPayV2ButtonParameters {\n        const {\n            config: { merchantId, testMode },\n            initializationData: {\n                checkoutLanguage,\n                checkoutSessionMethod,\n                createCheckoutSessionConfig,\n                extractAmazonCheckoutSessionId,\n                ledgerCurrency,\n                publicKeyId,\n            },\n        } = getPaymentMethodOrThrow(methodId);\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath, storeCountryCode },\n        } = getStoreConfigOrThrow();\n\n        const cart = getCart();\n\n        if (!merchantId || !ledgerCurrency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            productType:\n                cart && getShippableItemsCount(cart) === 0\n                    ? AmazonPayV2PayOptions.PayOnly\n                    : AmazonPayV2PayOptions.PayAndShip,\n            placement,\n            buttonColor: AmazonPayV2ButtonColor.Gold,\n        };\n\n        if (this.isPh4Enabled(features, storeCountryCode)) {\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this._isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: features['INT-5826.amazon_relative_url']\n                ? `/remote-checkout/${methodId}/payment-session`\n                : `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private _isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private _getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this._getOrThrow(this._amazonPayV2SDK);\n    }\n\n    private _getButtonParentContainer(): HTMLDivElement {\n        return this._getOrThrow(this._buttonParentContainer);\n    }\n\n    private _getAmazonPayV2Button(): AmazonPayV2Button {\n        return this._getOrThrow(this._amazonPayV2Button);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { AmazonPayV2HostWindow, AmazonPayV2Regions, AmazonPayV2SDK } from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AmazonPayV2HostWindow = window,\n    ) {}\n\n    async load(method: PaymentMethod): Promise<AmazonPayV2SDK> {\n        const { initializationData: { region = 'us' } = {} } = method;\n\n        const amazonPayV2Region = (AmazonPayV2Regions as any)[region];\n\n        await this._scriptLoader.loadScript(\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\n        );\n\n        if (!this._window.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.amazon;\n    }\n}\n","import { assertApplePayWindow } from './is-apple-pay-window';\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import {\n    GooglePayBraintreeDataRequest,\n    GooglePayBraintreePaymentDataRequestV1,\n    GooglePayCreator,\n    GooglePaymentData,\n    TokenizePayload,\n} from '../googlepay';\nimport { PaypalAuthorizeData, PaypalButtonOptions, PaypalButtonRender, PaypalSDK } from '../paypal';\n\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\n/**\n *\n * Common\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string;\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\nexport interface BraintreeSDK {\n    client?: BraintreeClientCreator;\n    dataCollector?: BraintreeDataCollectorCreator;\n    googlePayment?: GooglePayCreator;\n    hostedFields?: BraintreeHostedFieldsCreator;\n    paypal?: BraintreePaypalCreator;\n    paypalCheckout?: BraintreePaypalCheckoutCreator;\n    threeDSecure?: BraintreeThreeDSecureCreator;\n    venmo?: BraintreeVenmoCheckoutCreator;\n    visaCheckout?: BraintreeVisaCheckoutCreator;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport interface BraintreeDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\nexport interface BraintreeError extends Error {\n    type: 'CUSTOMER' | 'MERCHANT' | 'NETWORK' | 'INTERNAL' | 'UNKNOWN';\n    code: string;\n    details?: unknown;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeRequestData): Promise<BraintreeTokenizeResponse>;\n    getVersion(): string | void;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeTokenizeResponse {\n    creditCards: Array<{ nonce: string }>;\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean;\n    paypal?: boolean;\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n/**\n *\n * Braintree Google Pay\n *\n */\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface GooglePayBraintreeSDK extends BraintreeModule {\n    createPaymentDataRequest(\n        request?: GooglePayBraintreeDataRequest,\n    ): GooglePayBraintreePaymentDataRequestV1;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(options: BraintreeThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    challengeRequested: boolean;\n    showLoader?: boolean;\n    addFrame(error: Error | undefined, iframe: HTMLIFrameElement): void;\n    removeFrame(): void;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\ninterface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => void): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop: boolean;\n    paymentMethodUsage: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends Window {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { PaypalHostWindow } from '../paypal';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeError,\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n    PAYPAL_COMPONENTS,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _venmoCheckout?: Promise<BraintreeVenmoCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n    private _window: PaypalHostWindow;\n\n    constructor(private _braintreeScriptLoader: BraintreeScriptLoader) {\n        this._window = window;\n    }\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader\n                .loadClient()\n                .then((client) => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    async getPaypalCheckout(\n        config: { currency: string },\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this._braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                components: PAYPAL_COMPONENTS.toString(),\n            };\n\n            if (!this._window.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this._paypalCheckout = paypalCheckout.create(paypalCheckoutConfig, paypalCheckoutCallback);\n\n        return this._paypalCheckout;\n    }\n\n    async getVenmoCheckout(\n        onSuccess: (braintreeVenmoCheckout: BraintreeVenmoCheckout) => void,\n        onError: (error: BraintreeError | UnsupportedBrowserError) => void,\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this._venmoCheckout) {\n            const client = await this.getClient();\n\n            const venmoCheckout = await this._braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const venmoCheckoutCallback = (\n                error: BraintreeError,\n                braintreeVenmoCheckout: BraintreeVenmoCheckout,\n            ): void => {\n                if (error) {\n                    return onError(error);\n                }\n\n                if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                    return onError(new UnsupportedBrowserError());\n                }\n\n                onSuccess(braintreeVenmoCheckout);\n            };\n\n            this._venmoCheckout = venmoCheckout.create(venmoCheckoutConfig, venmoCheckoutCallback);\n        }\n\n        return this._venmoCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([this.getClient(), this._braintreeScriptLoader.load3DS()]).then(\n                ([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }),\n            );\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n                .then(([client, dataCollector]) =>\n                    dataCollector.create({ client, kount: true, ...options }),\n                )\n                .catch((error) => {\n                    if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                        return { deviceData: undefined, teardown: () => Promise.resolve() };\n                    }\n\n                    throw error;\n                });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ]).then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>,\n    ): Promise<BraintreeHostedFields> {\n        const [client, hostedFields] = await Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadHostedFields(),\n        ]);\n\n        return hostedFields.create({ ...options, client });\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._googlePay),\n            this._teardown(this._paypalCheckout),\n            this._teardown(this._venmoCheckout),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n            this._paypalCheckout = undefined;\n            this._venmoCheckout = undefined;\n            this._visaCheckout = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ? module.then((mod) => mod.teardown()) : Promise.resolve();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nconst version = '3.81.0';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window,\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/client.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/three-d-secure.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/data-collector.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/visa-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/venmo.min.js`)\n            .then(() => {\n                if (!this._window.braintree?.venmo) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.venmo;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/google-payment.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        await this._scriptLoader.loadScript(\n            `//js.braintreegateway.com/web/${version}/js/hosted-fields.min.js`,\n        );\n\n        if (!this._window.braintree || !this._window.braintree.hostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.braintree.hostedFields;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(public error?: Error) {\n        super(\n            'Unable to synchronize your checkout details with a third party provider. Please try again later.',\n        );\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { PaymentInitializeOptions } from '../..';\nimport { Checkout, InternalCheckoutSelectors } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport {\n    BraintreeModuleCreator,\n    BraintreeVerifyPayload,\n    GooglePayBraintreeSDK,\n} from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(\n        checkout: Checkout | void,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n        publishableKey?: string,\n    ): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayProviderProcessor {\n    initialize(options: PaymentInitializeOptions): Promise<void>;\n    processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors>;\n}\n\nexport type GooglePayCreator = BraintreeModuleCreator<GooglePayBraintreeSDK>;\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport type GooglePayVerifyPayload = BraintreeVerifyPayload | undefined;\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new (options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    tokenFormat?: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: TokenizeType;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport enum BillingAddressFormat {\n    /*\n     * Name, country code, and postal code (default).\n     */\n    Min = 'MIN',\n    /*\n     * Name, street address, locality, region, country code, and postal code.\n     */\n    Full = 'FULL',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [\n        {\n            type: string;\n            parameters: {\n                allowedAuthMethods: string[];\n                allowedCardNetworks: string[];\n                allowPrepaidCards?: boolean;\n                billingAddressRequired?: boolean;\n                billingAddressParameters?: {\n                    format?: BillingAddressFormat;\n                    phoneNumberRequired?: boolean;\n                };\n            };\n            tokenizationSpecification?: TokenizationSpecification;\n        },\n    ];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport type GooglePayTransactionInfo = Pick<GooglePayPaymentDataRequestV2, 'transactionInfo'>;\n","export function getFirstAndLastName(fullName: string): [string, string] {\n    const nameParts = fullName.split(' ');\n\n    if (nameParts.length === 1) {\n        return [fullName, ''];\n    }\n\n    const firstName = nameParts.slice(0, -1).join(' ');\n    const lastName = nameParts[nameParts.length - 1];\n\n    return [firstName, lastName];\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { Checkout, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload,\n} from './googlepay';\nimport { getFirstAndLastName } from './googlepay-get-first-and-last-name';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n    private _isBuyNowFlow = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender,\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default,\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    updatePaymentDataRequest(payloadToUpdate: { currencyCode: string; totalPrice: string }) {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        paymentDataRequest.transactionInfo.currencyCode = payloadToUpdate.currencyCode;\n        paymentDataRequest.transactionInfo.totalPrice = payloadToUpdate.totalPrice;\n\n        this._paymentDataRequest = paymentDataRequest;\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer\n            .parseResponse(paymentData)\n            .then((tokenizePayload) => this._postForm(tokenizePayload))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(\n                this._mapGooglePayAddressToShippingAddress(shippingAddress),\n            ),\n        );\n    }\n\n    updateBuyNowFlowFlag(isBuyNowFlow: boolean): void {\n        this._isBuyNowFlow = isBuyNowFlow;\n    }\n\n    private _configureWallet(): Promise<void> {\n        const features = this._store.getState().config.getStoreConfig()?.checkoutSettings.features;\n        const options =\n            features && features['INT-5826.google_hostname_alias']\n                ? { params: { origin: window.location.hostname } }\n                : undefined;\n        const methodId = this._getMethodId();\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId, options))\n            .then((state) => {\n                const checkout = this._getCheckout(state);\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(\n                        checkout,\n                        paymentMethod,\n                        hasShippingAddress,\n                    ),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient\n                        .isReadyToPay({\n                            allowedPaymentMethods: [\n                                {\n                                    type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                    parameters: {\n                                        allowedAuthMethods:\n                                            paymentDataRequest.allowedPaymentMethods[0].parameters\n                                                .allowedAuthMethods,\n                                        allowedCardNetworks:\n                                            paymentDataRequest.allowedPaymentMethods[0].parameters\n                                                .allowedCardNetworks,\n                                    },\n                                },\n                            ],\n                            apiVersion: paymentDataRequest.apiVersion,\n                            apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                        })\n                        .then((response) => {\n                            if (response.result) {\n                                return;\n                            }\n\n                            throw new PaymentMethodInvalidError();\n                        });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getCheckout(state: InternalCheckoutSelectors): Checkout | void {\n        if (this._isBuyNowFlow) {\n            return;\n        }\n\n        const checkout = state.checkout.getCheckout();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return checkout;\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(\n        paymentData: GooglePaymentData,\n        id: string,\n        customerEmail?: string,\n    ): BillingAddressUpdateRequestBody {\n        const fullName = paymentData.paymentMethodData.info.billingAddress.name;\n        const [firstName, lastName] = getFirstAndLastName(fullName);\n        const address1 = paymentData.paymentMethodData.info.billingAddress.address1;\n        const city = paymentData.paymentMethodData.info.billingAddress.locality;\n        const postalCode = paymentData.paymentMethodData.info.billingAddress.postalCode;\n        const countryCode = paymentData.paymentMethodData.info.billingAddress.countryCode;\n\n        if (!firstName || !address1 || !city || !postalCode || !countryCode) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            id,\n            firstName,\n            lastName,\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1,\n            address2:\n                paymentData.paymentMethodData.info.billingAddress.address2 +\n                paymentData.paymentMethodData.info.billingAddress.address3,\n            city,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode:\n                paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode,\n            countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: customerEmail || paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        const [firstName, lastName] = getFirstAndLastName(address.name);\n\n        return {\n            firstName,\n            lastName,\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n        const buyNowCartId = this._isBuyNowFlow\n            ? this._store.getState().cart.getCartOrThrow().id\n            : undefined;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                tokenFormat: postPaymentData.tokenFormat,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            },\n        });\n    }\n\n    private _updateBillingAddress(\n        paymentData: GooglePaymentData,\n    ): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(\n            paymentData,\n            remoteBillingAddress.id,\n            remoteBillingAddress.email,\n        );\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped),\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window,\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader.loadScript('https://pay.google.com/gp/p/js/pay.js').then(() => {\n            if (!this._window.google) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.google;\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(\n    store: CheckoutStore,\n    initializer: GooglePayInitializer,\n): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender),\n        ),\n        requestSender,\n    );\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayAdyenV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'adyen',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayAdyenV3Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'adyen',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizationSpecification,\n    TokenizePayload,\n} from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(\n            paymentGatewaySpecification,\n            supportedCards,\n        );\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo: {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(\n        tokenizationSpecification: TokenizationSpecification,\n        supportedCards: string[],\n    ) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map((card) =>\n                    card === 'MC' ? 'MASTERCARD' : card,\n                ),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: BillingAddressFormat.Full,\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayBNZInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'cybersource',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\nimport {\n    GooglePayBraintreeDataRequest,\n    GooglePayBraintreePaymentDataRequestV1,\n} from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(private _braintreeSDKCreator: BraintreeSDKCreator) {}\n\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator\n            .getGooglePaymentComponent()\n            .then((googleBraintreePaymentInstance) => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress,\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token)\n            .androidPayCards[0];\n\n        return Promise.resolve({\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        });\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout | undefined,\n        initializationData: any,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice,\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(\n                googlePayBraintreePaymentDataRequest,\n            ),\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n        googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1,\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks:\n                            googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'braintree',\n                            'braintree:apiVersion': 'v1',\n                            'braintree:authorizationFingerprint':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:authorizationFingerprint'],\n                            'braintree:merchantId':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:merchantId'],\n                            'braintree:sdkVersion':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:sdkVersion'],\n                        },\n                    },\n                },\n            ],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { ContentType } from '../../../common/http-request';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\nimport { CheckoutcomGooglePayToken, CheckoutcomToken } from '../checkoutcom';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayCheckoutcomInitializer implements GooglePayInitializer {\n    private _publishableKey = '';\n    private _testMode = true;\n    private _errorMessage = 'Unable to parse response from GooglePay.';\n\n    constructor(private _requestSender: RequestSender) {}\n\n    async initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        this._publishableKey = paymentMethod.initializationData.checkoutcomkey;\n        this._testMode = !!paymentMethod.config.testMode;\n\n        return this._mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress,\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let token;\n\n        try {\n            token = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError(this._errorMessage);\n        }\n\n        if (!token.signature || !token.protocolVersion || !token.signedMessage) {\n            throw new PaymentMethodFailedError(this._errorMessage);\n        }\n\n        const finalToken = await this._convertToken(this._testMode, this._publishableKey, token);\n\n        const payload: TokenizePayload = {\n            nonce: finalToken.token,\n            type: 'CreditCard',\n            description: paymentData.paymentMethodData.description,\n            details: {\n                cardType: paymentData.paymentMethodData.info.cardNetwork,\n                lastFour: paymentData.paymentMethodData.info.cardDetails,\n            },\n        };\n\n        if (finalToken.token_format) {\n            payload.tokenFormat = finalToken.token_format;\n        }\n\n        return payload;\n    }\n\n    private async _convertToken(\n        testMode: boolean,\n        checkoutcomkey: string,\n        token: CheckoutcomGooglePayToken,\n    ): Promise<CheckoutcomToken> {\n        const checkoutcomToken: CheckoutcomToken = await this._requestCheckoutcomTokenize(\n            testMode,\n            checkoutcomkey,\n            {\n                type: 'googlepay',\n                token_data: token,\n            },\n        );\n\n        if (!checkoutcomToken || !checkoutcomToken.token) {\n            throw new PaymentMethodFailedError('Unable to parse response from Checkout.com');\n        }\n\n        return checkoutcomToken;\n    }\n\n    private async _requestCheckoutcomTokenize(\n        testMode: boolean,\n        checkoutcomKey: string,\n        data = {},\n    ): Promise<CheckoutcomToken> {\n        const TEST_URL = 'https://api.sandbox.checkout.com/tokens';\n        const LIVE_URL = 'https://api.checkout.com/tokens';\n\n        const url = testMode ? TEST_URL : LIVE_URL;\n\n        const response = await this._requestSender.post(url, {\n            credentials: false,\n            body: data,\n            headers: {\n                'Content-Type': ContentType.Json,\n                Authorization: checkoutcomKey,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return response.body as CheckoutcomToken;\n    }\n\n    private _mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'checkoutltd',\n                            gatewayMerchantId: initializationData.checkoutcomkey,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayCybersourceV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'cybersource',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayOrbitalInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'chase',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return Promise.resolve({\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            });\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n            consignments,\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n                bopis,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const isPickup = consignments.every((consignment) => consignment.selectedPickupOption);\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'stripe',\n                            'stripe:version': stripeVersion,\n                            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired:\n                bopis?.enabled && isPickup && bopis?.requiredAddress === 'none'\n                    ? false\n                    : !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayStripeUPEInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let payload;\n\n        try {\n            payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        if (\n            !payload.id ||\n            !payload.type ||\n            !payload.card ||\n            !payload.card.brand ||\n            !payload.card.last4\n        ) {\n            throw new PaymentMethodFailedError('Unable to parse response from Google Pay.');\n        }\n\n        return Promise.resolve({\n            nonce: payload.id,\n            type: payload.type,\n            details: {\n                cardType: payload.card.brand,\n                lastFour: payload.card.last4,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode, decimalPlaces },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'stripe',\n                            'stripe:version': stripeVersion,\n                            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, decimalPlaces).toFixed(decimalPlaces),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\ninterface MasterpassScriptLoaderParams {\n    useMasterpassSrc: boolean;\n    language: string;\n    testMode?: boolean;\n    checkoutId?: string;\n}\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window,\n    ) {}\n\n    async load({\n        useMasterpassSrc,\n        language,\n        testMode,\n        checkoutId,\n    }: MasterpassScriptLoaderParams): Promise<Masterpass> {\n        if (useMasterpassSrc) {\n            const subdomain = testMode ? 'sandbox.' : '';\n            const params = [`locale=${language}`, `checkoutid=${checkoutId}`];\n\n            const sourceUrl = [\n                `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\n                params.join('&'),\n            ].join('?');\n\n            await this._scriptLoader.loadScript(sourceUrl);\n\n            if (!this._window.masterpass) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.masterpass;\n        }\n\n        await this._scriptLoader.loadScript(\n            `//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`,\n        );\n\n        if (!this._window.masterpass) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.masterpass;\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(private _scriptLoader: ScriptLoader) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n        };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport {\n    FundingType,\n    PaypalCommerceHostWindow,\n    PaypalCommerceInitializationData,\n    PaypalCommerceScriptParams,\n    PaypalCommerceSDK,\n} from './paypal-commerce-sdk';\n\nexport default class PaypalCommerceScriptLoader {\n    private _window: PaypalCommerceHostWindow;\n    private _paypalSdk?: Promise<PaypalCommerceSDK>;\n\n    constructor(private _scriptLoader: ScriptLoader) {\n        this._window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PaypalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n    ): Promise<PaypalCommerceSDK> {\n        if (!this._paypalSdk) {\n            this._paypalSdk = this.loadPayPalSDK(\n                this._getPayPalSdkScriptConfigOrThrow(\n                    paymentMethod,\n                    currencyCode,\n                    initializesOnCheckoutPage,\n                ),\n            );\n        }\n\n        return this._paypalSdk;\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PaypalCommerceScriptParams,\n    ): Promise<PaypalCommerceSDK> {\n        if (!this._window.paypalLoadScript) {\n            const PAYPAL_SDK_VERSION = '5.0.5';\n            const scriptSrc = `https://unpkg.com/@paypal/paypal-js@${PAYPAL_SDK_VERSION}/dist/iife/paypal-js.min.js`;\n\n            await this._scriptLoader.loadScript(scriptSrc, { async: true, attributes: {} });\n\n            if (!this._window.paypalLoadScript) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        await this._window.paypalLoadScript(paypalSdkScriptConfig);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n\n    private _getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PaypalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PaypalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isInlineCheckoutEnabled,\n            isPayPalCreditAvailable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const shouldShowInlineCheckout = !initializesOnCheckoutPage && isInlineCheckoutEnabled;\n\n        const commit =\n            shouldShowInlineCheckout || isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = shouldShowInlineCheckout || id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = !shouldShowInlineCheckout && !isHostedCheckoutEnabled; // should disable APMs if Inline Checkout or Shipping Options feature enabled\n        const enableVenmoFunding = shouldEnableAPMs && isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !shouldEnableAPMs || !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            'client-id': clientId,\n            'data-partner-attribution-id': attributionId,\n            'data-client-token': clientToken,\n            'merchant-id': merchantId,\n            'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n            'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n            commit,\n            components: ['buttons', 'hosted-fields', 'messages', 'payment-fields'],\n            currency: currencyCode,\n            intent,\n        };\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\n\nimport {\n    OrderData,\n    OrderStatus,\n    PayPalCreateOrderRequestBody,\n    UpdateOrderPayload,\n} from './paypal-commerce-sdk';\n\nexport interface ParamsForProvider {\n    isCredit?: boolean;\n    isCheckout?: boolean;\n    isCreditCard?: boolean;\n    isAPM?: boolean;\n    isVenmo?: boolean;\n}\n\nexport default class PaypalCommerceRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    // TODO: this method should be removed when provider will be passed as an argument\n    // (to prevent containing unnecessary provider detecting logic inside)\n    async setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<OrderData> {\n        const { isCredit, isCheckout, isCreditCard, isAPM, isVenmo } = params;\n        let provider = 'paypalcommerce';\n\n        if (isCreditCard) {\n            provider = 'paypalcommercecreditcardscheckout';\n        } else if (isCheckout) {\n            provider = isCredit ? 'paypalcommercecreditcheckout' : 'paypalcommercecheckout';\n        } else if (isCredit) {\n            provider = 'paypalcommercecredit';\n        }\n\n        if (isVenmo && !isAPM) {\n            provider = isCheckout ? 'paypalcommercevenmocheckout' : 'paypalcommercevenmo';\n        }\n\n        if (isAPM) {\n            provider = isCheckout\n                ? 'paypalcommercealternativemethodscheckout'\n                : 'paypalcommercealternativemethod';\n        }\n\n        return this.createOrder(provider, { cartId });\n    }\n\n    async createOrder(\n        providerId: string,\n        requestBody: PayPalCreateOrderRequestBody,\n    ): Promise<OrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.post<OrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus() {\n        const url = '/api/storefront/initialization/paypalcommerce';\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.get<OrderStatus>(url, { headers });\n\n        return res.body;\n    }\n\n    async updateOrder(payload: UpdateOrderPayload) {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = payload;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.put(url, { headers, body });\n\n        return res.body;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    initializeBilling(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializeShipping(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializePayment(\n        methodName: string,\n        params?: InitializePaymentOptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url =\n            '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    forgetCheckout({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/forget-checkout`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { Action, createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutActionCreator } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, {\n    InitializePaymentOptions,\n} from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n    ) {}\n\n    initializeBilling(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializeShipping(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(\n                    RemoteCheckoutActionType.InitializeRemoteShippingRequested,\n                    undefined,\n                    { methodId },\n                ),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializePayment(\n        methodId: string,\n        params?: InitializePaymentOptions,\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(\n                        createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, {\n                            methodId,\n                        }),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.LoadRemoteSettingsFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .signOut(methodId, options)\n                .then(() => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded,\n                            undefined,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    forgetCheckout(methodId: string, options?: RequestOptions): Observable<Action> {\n        return concat(\n            of(\n                createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested,\n                    undefined,\n                    { methodId },\n                ),\n            ),\n            defer(async () => {\n                await this._remoteCheckoutRequestSender.forgetCheckout(options);\n                await this._checkoutActionCreator.loadCurrentCheckout();\n\n                return createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded,\n                    undefined,\n                    { methodId },\n                );\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed,\n                    error,\n                    { methodId },\n                ),\n            ),\n        );\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(\n        methodId: K,\n        data: Partial<RemoteCheckoutStateData[K]>,\n    ): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport {\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2Placement,\n} from '../../../payment/strategies/amazon-pay-v2';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n\n        await this._amazonPayV2PaymentProcessor.initialize(getPaymentMethodOrThrow(methodId));\n\n        if (!amazonpay) {\n            await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        }\n\n        this._amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this._store.getState(),\n            containerId,\n            methodId,\n            options: amazonpay,\n            placement: AmazonPayV2Placement.Cart,\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        return this._amazonPayV2PaymentProcessor.deinitialize();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { Cart } from '../../../cart';\nimport { Checkout, CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { StoreConfig } from '../../../config';\nimport { OrderActionCreator } from '../../../order';\nimport {\n    Payment,\n    PaymentActionCreator,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n} from '../../../payment';\nimport { PaymentMethodCancelledError } from '../../../payment/errors';\nimport {\n    ApplePaySessionFactory,\n    assertApplePayWindow,\n} from '../../../payment/strategies/apple-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _requestSender: RequestSender,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _sessionFactory: ApplePaySessionFactory,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { buttonClassName, onPaymentAuthorize } = applepay;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick);\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(\n        containerId: string,\n        buttonClassName = 'apple-pay-checkout-button',\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        document.body.classList.add('apple-pay-supported');\n\n        const button = document.createElement('div');\n\n        button.classList.add(buttonClassName);\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-label', 'Apple Pay button');\n        container.appendChild(button);\n\n        return button;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const config = state.config.getStoreConfigOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({ label: tax.name, amount: `${tax.amount.toFixed(decimalPlaces)}` }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            try {\n                await this._store.dispatch(\n                    this._remoteCheckoutActionCreator.signOut(paymentMethod.id),\n                );\n\n                return await this._store.dispatch(\n                    this._checkoutActionCreator.loadCurrentCheckout(),\n                );\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._store.dispatch(\n                this._consignmentActionCreator.updateAddress(shippingAddress),\n            );\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._store.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.cart.getCartOrThrow();\n        let checkout = state.checkout.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        unselectedOptions?.forEach((option) =>\n            shippingOptions.push({\n                label: option.description,\n                amount: `${option.cost.toFixed(decimalPlaces)}`,\n                detail: option.additionalDescription,\n                identifier: option.id,\n            }),\n        );\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._store.getState();\n        checkout = state.checkout.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._store.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.cart.getCartOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            { label: this._subTotalLabel, amount: `${checkout.subtotal.toFixed(decimalPlaces)}` },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({ label: tax.name, amount: `${tax.amount.toFixed(decimalPlaces)}` }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._store.dispatch(this._consignmentActionCreator.selectShippingOption(optionId));\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber;\n\n        try {\n            await this._store.dispatch(\n                this._billingAddressActionCreator.updateAddress({\n                    ...transformedBillingAddress,\n                    email: emailAddress,\n                    phone,\n                }),\n            );\n\n            if (requiresShipping) {\n                await this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(transformedShippingAddress),\n                );\n            }\n\n            await this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    useStoreCredit: false,\n                }),\n            );\n            await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { Address } from '../../../address';\n\nimport { BraintreeShippingAddressOverride } from './braintree';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalButtonStyleOptions } from '../../../payment/strategies/paypal';\n\nexport default function getValidButtonStyle(\n    style: PaypalButtonStyleOptions,\n): PaypalButtonStyleOptions {\n    const { color, fundingicons, height, layout, shape, size, tagline } = style;\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height?: number): number {\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (typeof height !== 'number' || height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { LegacyAddress } from '../../../address';\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyBillingAddress(\n    details: BraintreeDetails,\n): Partial<LegacyAddress> {\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n","import { LegacyAddress } from '../../../address';\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyShippingAddress(\n    details: BraintreeDetails,\n): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalHostWindow } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalButtonInitializeOptions } from './braintree-paypal-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<\n    BraintreePaypalButtonInitializeOptions,\n    'buyNowInitializeOptions'\n>;\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n        const { messagingContainerId, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypal.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypal.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypal.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypal.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow().currency.code;\n        }\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions = { currency: currencyCode };\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this._renderPayPalComponents(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, messagingContainerId, onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalComponents(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { messagingContainerId } = braintreepaypal;\n\n        this._renderPayPalMessages(messagingContainerId);\n        this._renderPayPalButton(\n            braintreePaypalCheckout,\n            braintreepaypal,\n            containerId,\n            methodId,\n            testMode,\n        );\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypal;\n\n        const { paypal } = this._window;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const validButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                commit: false,\n                fundingSource,\n                style: validButtonStyle,\n                createOrder: () => this._setupPayment(braintreePaypalCheckout, braintreepaypal),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this._tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        shouldProcessPayment,\n                        onAuthorizeError,\n                    ),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            }\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private _renderPayPalMessages(messagingContainerId?: string): void {\n        const isMessageContainerAvailable =\n            messagingContainerId && Boolean(document.getElementById(messagingContainerId));\n        const { paypal } = this._window;\n\n        if (paypal && isMessageContainerAvailable) {\n            const state = this._store.getState();\n            const cart = state.cart.getCartOrThrow();\n\n            const paypalMessagesRender = paypal.Messages({\n                amount: cart.cartAmount,\n                placement: 'cart',\n            });\n\n            paypalMessagesRender.render(`#${messagingContainerId}`);\n        } else {\n            this._removeElement(messagingContainerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n    ): Promise<string> {\n        const { buyNowInitializeOptions, shippingAddress, onPaymentError } = braintreepaypal;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(\n                    this._checkoutActionCreator.loadDefaultCheckout(),\n                );\n            }\n\n            const customer = state.customer.getCustomer();\n\n            const amount = this._buyNowCart\n                ? this._buyNowCart.cartAmount\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode =\n                braintreepaypal.currencyCode ?? state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return cart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        buttonContainerId: string,\n        messagingContainerId?: string,\n        onErrorCallback?: (error: BraintreeError) => void,\n    ): void {\n        this._removeElement(buttonContainerId);\n        this._removeElement(messagingContainerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","export interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalButtonStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonStyleLabelOption,\n    PaypalHostWindow,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalCreditButtonInitializeOptions } from './braintree-paypal-credit-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<\n    BraintreePaypalCreditButtonInitializeOptions,\n    'buyNowInitializeOptions'\n>;\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypalcredit.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypalcredit.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow().currency.code;\n        }\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions = { currency: currencyCode };\n        const paypalCheckoutCallback = (braintreePaypalCheckout: BraintreePaypalCheckout) =>\n            this._renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypalcredit;\n        const { paypal } = this._window;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n            const commonButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            fundingSources.forEach((fundingSource) => {\n                const buttonStyle =\n                    fundingSource === paypal.FUNDING.CREDIT\n                        ? { label: PaypalButtonStyleLabelOption.CREDIT, ...commonButtonStyle }\n                        : commonButtonStyle;\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        commit: false,\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () =>\n                            this._setupPayment(braintreePaypalCheckout, braintreepaypalcredit),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this._tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                shouldProcessPayment,\n                                onAuthorizeError,\n                            ),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n    ): Promise<string> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(\n                    this._checkoutActionCreator.loadDefaultCheckout(),\n                );\n            }\n\n            const customer = state.customer.getCustomer();\n\n            const amount = this._buyNowCart\n                ? this._buyNowCart.cartAmount\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode =\n                braintreepaypalcredit.currencyCode ??\n                state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        containerId: string,\n        onErrorCallback?: (error: BraintreeError) => void,\n    ): void {\n        this._removeElement(containerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport { BuyNowCartRequestBody, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport {\n    BraintreeError,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n} from '../../../payment/strategies/braintree';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\nimport { CheckoutButtonMethodType } from '../index';\n\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\nconst venmoButtonStyle = {\n    backgroundColor: '#3D95CE',\n    backgroundPosition: '50% 50%',\n    backgroundSize: '80px auto',\n    backgroundImage: 'url(\"/app/assets/img/payment-providers/venmo-logo-white.svg\")',\n    backgroundRepeat: 'no-repeat',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    transition: '0.2s ease',\n    minHeight: '40px',\n    minWidth: '150px',\n    height: '100%',\n    width: '100%',\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\ninterface BuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n}\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private _onError = noop;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        this._onError = braintreevenmo?.onError || this._handleError;\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getVenmoCheckout(\n            (braintreeVenmoCheckout) =>\n                this._handleInitializationVenmoSuccess(\n                    braintreeVenmoCheckout,\n                    containerId,\n                    braintreevenmo?.buyNowInitializeOptions,\n                ),\n            (error) => this._handleInitializationVenmoError(error, containerId),\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private _handleInitializationVenmoSuccess(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        parentContainerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): void {\n        return this._renderVenmoButton(\n            braintreeVenmoCheckout,\n            parentContainerId,\n            buyNowInitializeOptions,\n        );\n    }\n\n    private _handleInitializationVenmoError(\n        error: BraintreeError | UnsupportedBrowserError,\n        containerId: string,\n    ): void {\n        this._removeVenmoContainer(containerId);\n\n        return this._onError(error);\n    }\n\n    private _removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private _renderVenmoButton(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        containerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): void {\n        const venmoButton = document.getElementById(containerId);\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, venmoButtonStyle);\n\n        venmoButton.addEventListener('click', async () => {\n            venmoButton.setAttribute('disabled', 'true');\n\n            const buyBowCart = await this._createBuyNowCart(buyNowInitializeOptions);\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(\n                    async (error: BraintreeError, payload: BraintreeTokenizePayload) => {\n                        venmoButton.removeAttribute('disabled');\n\n                        if (error) {\n                            return this._onError(error);\n                        }\n\n                        await this._handlePostForm(payload, buyBowCart?.id);\n                    },\n                );\n            }\n        });\n\n        venmoButton.addEventListener('mouseenter', () => {\n            venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n        });\n\n        venmoButton.addEventListener('mouseleave', () => {\n            venmoButton.style.backgroundColor = venmoButtonStyle.backgroundColor;\n        });\n    }\n\n    private async _createBuyNowCart(buyNowInitializeOptions?: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _handlePostForm(\n        payload: BraintreeTokenizePayload,\n        buyNowCartId?: string,\n    ): Promise<void> {\n        const { deviceData } = await this._braintreeSDKCreator.getDataCollector();\n        const { nonce, details } = payload;\n\n        this._formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: CheckoutButtonMethodType.BRAINTREE_VENMO,\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            ...(buyNowCartId && { cart_id: buyNowCartId }),\n        });\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CheckoutButtonMethodType } from '../';\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { GooglePayButtonInitializeOptions } from './googlepay-button-options';\n\ntype BuyNowInitializeOptions = Pick<GooglePayButtonInitializeOptions, 'buyNowInitializeOptions'>;\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _cartRequestSender: CartRequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId, currencyCode } = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        this._methodId = methodId;\n\n        const hasBuyNowCartOptions = Boolean(googlePayOptions?.buyNowInitializeOptions);\n\n        if (hasBuyNowCartOptions) {\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.currencyCode\" argument is not provided.`,\n                );\n            }\n        } else {\n            await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        }\n\n        this._googlePayPaymentProcessor.updateBuyNowFlowFlag(hasBuyNowCartOptions);\n        await this._googlePayPaymentProcessor.initialize(this._getMethodId());\n\n        this._walletButton = this._createSignInButton(containerId, googlePayOptions, currencyCode);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(\n        containerId: string,\n        buttonOptions: GooglePayButtonInitializeOptions,\n        currencyCode?: string,\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n        const { buttonType, buttonColor, buyNowInitializeOptions } = buttonOptions;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const handleValidButtonClick = (event: Event) =>\n            this._handleWalletButtonClick(event, { buyNowInitializeOptions }, currencyCode);\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(\n            handleValidButtonClick,\n            buttonType,\n            buttonColor,\n        );\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _getGooglePayOptions(\n        options: CheckoutButtonInitializeOptions,\n    ): GooglePayButtonInitializeOptions {\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV2 &&\n            options.googlepayadyenv2\n        ) {\n            return options.googlepayadyenv2;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV3 &&\n            options.googlepayadyenv3\n        ) {\n            return options.googlepayadyenv3;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET &&\n            options.googlepayauthorizenet\n        ) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BNZ && options.googlepaybnz) {\n            return options.googlepaybnz;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE &&\n            options.googlepaybraintree\n        ) {\n            return options.googlepaybraintree;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM &&\n            options.googlepaycheckoutcom\n        ) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2 &&\n            options.googlepaycybersourcev2\n        ) {\n            return options.googlepaycybersourcev2;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ORBITAL &&\n            options.googlepayorbital\n        ) {\n            return options.googlepayorbital;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPE &&\n            options.googlepaystripe\n        ) {\n            return options.googlepaystripe;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE &&\n            options.googlepaystripeupe\n        ) {\n            return options.googlepaystripeupe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return cart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    @bind\n    private async _handleWalletButtonClick(\n        event: Event,\n        { buyNowInitializeOptions }: BuyNowInitializeOptions,\n        currencyCode?: string,\n    ): Promise<void> {\n        event.preventDefault();\n\n        this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n        const cart = this._buyNowCart || this._store.getState().cart.getCartOrThrow();\n        const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n        if (this._buyNowCart && currencyCode) {\n            const payloadToUpdate = {\n                currencyCode,\n                totalPrice: String(cart.cartAmount),\n            };\n\n            this._googlePayPaymentProcessor.updatePaymentDataRequest(payloadToUpdate);\n\n            await this._store.dispatch(\n                this._checkoutActionCreator.loadCheckout(this._buyNowCart.id),\n            );\n        }\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(\n                    paymentData.shippingAddress,\n                );\n            }\n\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        const buyNowCartId = this._buyNowCart?.id;\n\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            ...(buyNowCartId && {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                cart_id: buyNowCartId,\n            }),\n        });\n    }\n}\n","export const supportedLocales: { [language: string]: string[] } = {\n    es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\n    en: [\n        'en_us',\n        'en_gb',\n        'en_ca',\n        'en_es',\n        'en_fr',\n        'en_ie',\n        'en_sg',\n        'en_au',\n        'en_nz',\n        'en_my',\n        'en_hk',\n        'en_th',\n        'en_ae',\n        'en_sa',\n        'en_qa',\n        'en_kw',\n        'en_za',\n    ],\n    pt: ['pt_br'],\n    zu: ['zu_za'],\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\n    zh: ['zh_sg', 'zh_hk'],\n    ms: ['ms_my'],\n    uk: ['uk_ua'],\n    sv: ['sv_se'],\n    hr: ['hr_hr'],\n    pl: ['pl_pl'],\n    nl: ['nl_be'],\n    it: ['it_it'],\n    de: ['de_de'],\n    fr: ['fr_fr', 'fr_ca'],\n};\n","import { supportedLocales } from './masterpass-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\n    const formattedLocale = `${language}_${country}`;\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'en_us';\n    }\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport {\n    formatLocale,\n    getCallbackUrl,\n    Masterpass,\n    MasterpassCheckoutOptions,\n    MasterpassScriptLoader,\n} from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string,\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        this._methodId = methodId;\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: paymentMethod.config.testMode,\n                    checkoutId: paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\n            })\n            .then((masterpass) => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n        const state = this._store.getState();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src =\n                'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalScriptLoader,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = '',\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = (this._paymentMethod = state.paymentMethods.getPaymentMethod(\n            options.methodId,\n        ));\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader\n            .loadPaypal(paymentMethod.config.merchantId)\n            .then((paypal) => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const fundingCreditOption = paypal.FUNDING.CREDIT || 'credit';\n                const allowedSources = paypalOptions.allowCredit ? [fundingCreditOption] : [];\n                const disallowedSources = !paypalOptions.allowCredit ? [fundingCreditOption] : [];\n\n                return paypal.Button.render(\n                    {\n                        env,\n                        client: clientToken,\n                        commit: paypalOptions.shouldProcessPayment,\n                        funding: {\n                            allowed: allowedSources,\n                            disallowed: disallowedSources,\n                        },\n                        style: {\n                            shape: PaypalButtonStyleShapeOption.RECT,\n                            ...pick(\n                                paypalOptions.style,\n                                'layout',\n                                'color',\n                                'label',\n                                'shape',\n                                'tagline',\n                                'fundingicons',\n                            ),\n                            size:\n                                paymentMethod.id === 'paypalexpress' &&\n                                paypalOptions.style?.size === 'small'\n                                    ? PaypalButtonStyleSizeOption.RESPONSIVE\n                                    : paypalOptions.style?.size,\n                        },\n                        payment: (_, actions) =>\n                            this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                        onAuthorize: (data, actions) =>\n                            this._tokenizePayment(\n                                data,\n                                actions,\n                                paypalOptions.shouldProcessPayment,\n                                paypalOptions.onAuthorizeError,\n                            ),\n                    },\n                    options.containerId,\n                );\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(\n                    `${this._host}/api/storefront/payment/paypalexpress`,\n                    { merchantId, cartId },\n                    {\n                        headers: {\n                            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                            ...SDK_VERSION_HEADERS,\n                        },\n                    },\n                );\n            })\n            .then((res) => res.id)\n            .catch((error) => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void, // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then((payload) => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { ShippingOption } from '../../../shipping';\n\nexport interface ClickDataOptions {\n    fundingSource: string;\n}\n\nexport interface ClickActions {\n    reject(): Promise<void>;\n    resolve(): Promise<void>;\n}\n\nexport interface OrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\nexport interface OrderStatus {\n    status: 'APPROVED' | 'CREATED' | string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonLayout {\n    vertical = 'vertical',\n    horizontal = 'horizontal',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: StyleButtonLayout;\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n    tagline?: boolean;\n    custom?: {\n        label?: string;\n        css?: {\n            background?: string;\n            color?: string;\n            width?: string;\n        };\n    };\n}\n\nexport interface PayPalAddress {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => PayPalOrderDetails;\n    };\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\n// TODO: this type should be merged with PayPalCheckoutButtonOptions in the future\nexport interface ButtonsOptions {\n    style?: PaypalButtonStyleOptions;\n    fundingSource?: string;\n    createOrder?(): Promise<string | void>; // TODO: this method should return only Promise<void>\n    onApprove?(data: ApproveCallbackPayload, actions?: ApproveCallbackActions): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): void;\n    onClick?(data: ClickDataOptions, actions: ClickActions): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalCheckoutButtonOptions {\n    experience: string;\n    style?: PaypalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onError(error: Error): void;\n    onShippingAddressChange(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n    onApprove(data: ApproveCallbackPayload, actions: ApproveCallbackActions): Promise<boolean>;\n    onComplete(data: CompleteCallbackDataPayload): void;\n}\n\nexport interface PaypalFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\nexport interface FieldsOptions {\n    style?: PaypalFieldsStyleOptions;\n    fundingSource: string;\n    fields: { name?: { value?: string }; email?: { value?: string } };\n}\n\nexport interface MessagesOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n    fundingSource?: string;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: string;\n}\n\nexport interface PaypalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PaypalCommerceHostedFieldOption;\n        cvv?: PaypalCommerceHostedFieldOption;\n        expirationDate?: PaypalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PaypalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PaypalCommerceHostedFields {\n    submit(options?: PaypalCommerceHostedFieldsSubmitOptions): PaypalCommerceHostedFieldsApprove;\n    getState(): PaypalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PaypalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PaypalCommerceHostedFieldsState {\n    cards: PaypalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PaypalCommerceHostedFieldsFieldData;\n        expirationDate?: PaypalCommerceHostedFieldsFieldData;\n        expirationMonth?: PaypalCommerceHostedFieldsFieldData;\n        expirationYear?: PaypalCommerceHostedFieldsFieldData;\n        cvv?: PaypalCommerceHostedFieldsFieldData;\n        postalCode?: PaypalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PaypalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface PaypalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface PaypalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PaypalCommerceFields {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceMessages {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    BANCONTACT: string;\n    GIROPAY: string;\n    P24: string;\n    EPS: string;\n    IDEAL: string;\n    MYBANK: string;\n    OXXO: string;\n    SOFORT: string;\n    SEPA: string;\n    BLIK: string;\n    TRUSTLY: string;\n    VERKKOPANKKI: string;\n    VENMO: string;\n}\n\nexport const NON_INSTANT_PAYMENT_METHODS = ['oxxo'];\n\nexport interface PaypalCommerceSDK {\n    FUNDING: PaypalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PaypalCommerceHostedFieldsRenderOptions): Promise<PaypalCommerceHostedFields>;\n    };\n    Buttons(params: ButtonsOptions | PaypalCheckoutButtonOptions): PaypalCommerceButtons;\n    PaymentFields(params: FieldsOptions): PaypalCommerceFields;\n    Messages(params: MessagesOptions): PaypalCommerceMessages;\n}\n\nexport interface PaypalCommerceHostWindow extends Window {\n    paypal?: PaypalCommerceSDK;\n    paypalLoadScript?(options: PaypalCommerceScriptParams): Promise<{ paypal: PaypalCommerceSDK }>;\n}\n\nexport type FundingType = string[];\n\nexport type EnableFundingType = FundingType | string;\n\nexport enum PayPalCommerceIntent {\n    authorize = 'authorize',\n    capture = 'capture',\n}\n\nexport interface PaypalCommerceInitializationData {\n    clientId: string;\n    merchantId?: string;\n    buyerCountry?: string;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isInlineCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    availableAlternativePaymentMethods: FundingType;\n    enabledAlternativePaymentMethods: FundingType;\n    clientToken?: string;\n    attributionId?: string;\n    isVenmoEnabled?: boolean;\n}\n\nexport type ComponentsScriptType = Array<\n    'buttons' | 'funding-eligibility' | 'hosted-fields' | 'messages' | 'payment-fields'\n>;\n\nexport interface PaypalCommerceScriptParams {\n    'client-id'?: string;\n    'merchant-id'?: string;\n    'buyer-country'?: string;\n    'disable-funding'?: FundingType;\n    'enable-funding'?: EnableFundingType;\n    'data-client-token'?: string;\n    'data-partner-attribution-id'?: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: PayPalCommerceIntent;\n    components?: ComponentsScriptType;\n}\n\nexport interface UpdateOrderPayload {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalCreateOrderRequestBody {\n    cartId: string;\n    instrumentId?: string;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport {\n    PaypalButtonStyleOptions,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonLayout,\n    StyleButtonShape,\n} from '../../../payment/strategies/paypal-commerce';\n\nexport default function getValidButtonStyle(\n    style: PaypalButtonStyleOptions,\n): PaypalButtonStyleOptions {\n    const { label, color, layout, shape, height, tagline } = style;\n\n    const validStyles = {\n        color: getValidColor(color),\n        height: getValidHeight(height),\n        label: getValidLabel(label),\n        layout: getValidLayout(layout),\n        shape: getValidShape(shape),\n        tagline: getValidTagline(tagline, layout),\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidColor(color?: StyleButtonColor): StyleButtonColor | undefined {\n    return color && StyleButtonColor[color] ? color : undefined;\n}\n\nfunction getValidLabel(label?: StyleButtonLabel): StyleButtonLabel | undefined {\n    return label && StyleButtonLabel[label] ? label : undefined;\n}\n\nfunction getValidLayout(layout?: StyleButtonLayout): StyleButtonLayout | undefined {\n    return layout && StyleButtonLayout[layout] ? layout : undefined;\n}\n\nfunction getValidShape(shape?: StyleButtonShape): StyleButtonShape | undefined {\n    return shape && StyleButtonShape[shape] ? shape : undefined;\n}\n\nfunction getValidTagline(tagline?: boolean, layout?: string): boolean | undefined {\n    if (\n        tagline &&\n        typeof tagline === 'boolean' &&\n        layout === StyleButtonLayout[StyleButtonLayout.horizontal]\n    ) {\n        return tagline;\n    }\n\n    return undefined;\n}\n\nfunction getValidHeight(height?: number): number {\n    const defaultHeight = 40;\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (!height || typeof height !== 'number') {\n        return defaultHeight;\n    }\n\n    if (height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../../../billing';\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator } from '../../../order';\nimport { PaymentActionCreator } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalButtonStyleOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../../../payment/strategies/paypal-commerce';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceButtonInitializeOptions } from './paypal-commerce-button-options';\n\nexport default class PaypalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n    private _buyNowCartId?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommerce, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        if (paypalcommerce.buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!paypalcommerce.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                paypalcommerce.currencyCode,\n                paypalcommerce.initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const currencyCode = state.cart.getCartOrThrow().currency.code;\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                paypalcommerce.initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(containerId, methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommerce: PaypalCommerceButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style, onComplete } =\n            paypalcommerce;\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData;\n\n        if (isHostedCheckoutEnabled && (!onComplete || typeof onComplete !== 'function')) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.onComplete\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this._onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this._onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this._onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const regularCallbacks = {\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalCallbacks = isHostedCheckoutEnabled\n            ? hostedCheckoutCallbacks\n            : regularCallbacks;\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource: paypalCommerceSdk.FUNDING.PAYPAL,\n            style: style ? this._getButtonStyle(style) : {},\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            ...paypalCallbacks,\n        };\n\n        const paypalButton = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n                await this._store.dispatch(this._checkoutActionCreator.loadCheckout(cart.id));\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const orderDetails = await this._getOrderDetailsOrThrow(actions);\n\n        try {\n            if (cart.lineItems.physicalItems.length > 0) {\n                const { payer, purchase_units } = orderDetails;\n                const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n                const address = this._getAddress({\n                    firstName: payer.name.given_name,\n                    lastName: payer.name.surname,\n                    email: payer.email_address,\n                    address1: shippingAddress.address_line_1,\n                    city: shippingAddress.admin_area_2,\n                    countryCode: shippingAddress.country_code,\n                    postalCode: shippingAddress.postal_code,\n                    stateOrProvinceCode: shippingAddress.admin_area_1,\n                });\n\n                await this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(address),\n                );\n                await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n                await this._updateOrder();\n            } else {\n                const { payer } = orderDetails;\n\n                const address = this._getAddress({\n                    firstName: payer.name.given_name,\n                    lastName: payer.name.surname,\n                    email: payer.email_address,\n                    address1: payer.address.address_line_1,\n                    city: payer.address.admin_area_2,\n                    countryCode: payer.address.country_code,\n                    postalCode: payer.address.postal_code,\n                    stateOrProvinceCode: payer.address.admin_area_1,\n                });\n\n                await this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(address),\n                );\n            }\n\n            await this._store.dispatch(\n                this._orderActionCreator.submitOrder({}, { params: { methodId } }),\n            );\n            await this._submitPayment(methodId, data.orderID);\n\n            if (onComplete) {\n                onComplete();\n            }\n\n            return true;\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async _getOrderDetailsOrThrow(actions: ApproveCallbackActions) {\n        try {\n            return actions.order.get();\n        } catch (error) {\n            throw new RequestError();\n        }\n    }\n\n    private async _onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this._getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and consignment addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n            await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n\n            const shippingOption = this._getShippingOptionOrThrow();\n\n            await this._store.dispatch(\n                this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n            );\n            await this._updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async _onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this._getShippingOptionOrThrow(data.selectedShippingOption.id);\n\n        try {\n            await this._store.dispatch(\n                this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n            );\n            await this._updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async _submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(\n            this._paymentActionCreator.submitPayment({ methodId, paymentData }),\n        );\n    }\n\n    private async _updateOrder(): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        try {\n            await this._paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    private _getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private _getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this._store.getState();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage ? 'paypalcommercecheckout' : 'paypalcommerce';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n        });\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { color, height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { color, height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../../../billing';\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator } from '../../../order';\nimport { PaymentActionCreator } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalButtonStyleOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../../../payment/strategies/paypal-commerce';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceCreditButtonInitializeOptions } from './paypal-commerce-credit-button-options';\n\nexport default class PaypalCommerceCreditButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercecredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.`,\n            );\n        }\n\n        const {\n            buyNowInitializeOptions,\n            currencyCode,\n            initializesOnCheckoutPage,\n            messagingContainerId,\n        } = paypalcommercecredit;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                cart.currency.code,\n                initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(containerId, methodId, paypalcommercecredit);\n        this._renderMessages(messagingContainerId);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercecredit: PaypalCommerceCreditButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style, onComplete } =\n            paypalcommercecredit;\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData;\n\n        if (isHostedCheckoutEnabled && (!onComplete || typeof onComplete !== 'function')) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.onComplete\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this._onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this._onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this._onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const regularCallbacks = {\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalCallbacks = isHostedCheckoutEnabled\n            ? hostedCheckoutCallbacks\n            : regularCallbacks;\n\n        const fundingSources = [\n            paypalCommerceSdk.FUNDING.PAYLATER,\n            paypalCommerceSdk.FUNDING.CREDIT,\n        ];\n\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: ButtonsOptions = {\n                    fundingSource,\n                    style: style ? this._getButtonStyle(style) : {},\n                    onClick: () => this._handleClick(buyNowInitializeOptions),\n                    createOrder: () => this._createOrder(initializesOnCheckoutPage),\n                    ...paypalCallbacks,\n                };\n\n                const paypalButton = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const orderDetails = await this._getOrderDetailsOrThrow(actions);\n\n        if (cart.lineItems.physicalItems.length > 0) {\n            const { payer, purchase_units } = orderDetails;\n            const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n            const address = this._getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: shippingAddress.address_line_1,\n                city: shippingAddress.admin_area_2,\n                countryCode: shippingAddress.country_code,\n                postalCode: shippingAddress.postal_code,\n                stateOrProvinceCode: shippingAddress.admin_area_1,\n            });\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n            await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n            await this._updateOrder();\n        } else {\n            const { payer } = orderDetails;\n\n            const address = this._getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: payer.address.address_line_1,\n                city: payer.address.admin_area_2,\n                countryCode: payer.address.country_code,\n                postalCode: payer.address.postal_code,\n                stateOrProvinceCode: payer.address.admin_area_1,\n            });\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        }\n\n        await this._store.dispatch(\n            this._orderActionCreator.submitOrder({}, { params: { methodId } }),\n        );\n        await this._submitPayment(methodId, data.orderID);\n\n        if (onComplete) {\n            onComplete();\n        }\n\n        return true;\n    }\n\n    private async _getOrderDetailsOrThrow(actions: ApproveCallbackActions) {\n        try {\n            return actions.order.get();\n        } catch (error) {\n            throw new RequestError();\n        }\n    }\n\n    private async _onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this._getShippingOptionOrThrow(data.selectedShippingOption.id);\n\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n        );\n        await this._updateOrder();\n    }\n\n    private async _submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(\n            this._paymentActionCreator.submitPayment({ methodId, paymentData }),\n        );\n    }\n\n    private async _onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this._getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        // Info: we use the same address to fill billing and consignment addresses to have valid quota on BE for order updating process\n        // on this stage we don't have access to valid customer's address accept shipping data\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n\n        const shippingOption = this._getShippingOptionOrThrow();\n\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n        );\n        await this._updateOrder();\n    }\n\n    private async _updateOrder(): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        try {\n            await this._paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    private _getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this._store.getState();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private _getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private _renderMessages(messagingContainerId?: string): void {\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const isMessagesAvailable = Boolean(\n            messagingContainerId && document.getElementById(messagingContainerId),\n        );\n\n        if (isMessagesAvailable) {\n            const state = this._store.getState();\n            const cart = state.cart.getCartOrThrow();\n\n            const paypalMessagesOptions = {\n                amount: cart.cartAmount,\n                placement: 'cart',\n                style: {\n                    layout: 'text',\n                },\n            };\n\n            const paypalMessages = paypalCommerceSdk.Messages(paypalMessagesOptions);\n\n            paypalMessages.render(`#${messagingContainerId}`);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceCreditButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n                await this._store.dispatch(this._checkoutActionCreator.loadCheckout(cart.id));\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage\n            ? 'paypalcommercecreditcheckout'\n            : 'paypalcommercecredit';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n        });\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { color, height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { color, height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalButtonStyleOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n} from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceAlternativeMethodsButtonOptions } from './paypal-commerce-alternative-methods-button-options';\n\nexport default class PaypalCommerceAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods.apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`,\n            );\n        }\n\n        const { buyNowInitializeOptions, currencyCode, initializesOnCheckoutPage } =\n            paypalcommercealternativemethods;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                cart.currency.code,\n                initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(methodId, containerId, paypalcommercealternativemethods);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        methodId: string,\n        containerId: string,\n        paypalcommercealternativemethods: PaypalCommerceAlternativeMethodsButtonOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, initializesOnCheckoutPage, style } =\n            paypalcommercealternativemethods;\n\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalCommerceSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const validButtonStyle = style ? this._getButtonStyle(style) : {};\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource: apm,\n            style: validButtonStyle,\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceAlternativeMethodsButtonOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage\n            ? 'paypalcommercealternativemethodscheckout'\n            : 'paypalcommercealternativemethod';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n        });\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { BillingAddressActionCreator, BillingAddressRequestBody } from '../../../billing';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { OrderActionCreator } from '../../../order';\nimport { PaymentActionCreator } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    CompleteCallbackDataPayload,\n    PaypalCheckoutButtonOptions,\n    PayPalCommerceIntent,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../../../payment/strategies/paypal-commerce';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { PaypalCommerceInlineCheckoutButtonInitializeOptions } from './paypal-commerce-inline-checkout-button-options';\n\nexport default class PaypalCommerceInlineCheckoutButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId, paypalcommerceinline } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.containerId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerceinline) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerceinline\" argument is not provided.',\n            );\n        }\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        const state = this._store.getState();\n        const currencyCode = state.cart.getCartOrThrow().currency.code;\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            false,\n        );\n\n        if (!paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        this._renderButton(methodId, containerId, paypalCommerceSdk, paypalcommerceinline);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        methodId: string,\n        containerId: string,\n        paypalCommerceSdk: PaypalCommerceSDK,\n        paypalcommerceinline: PaypalCommerceInlineCheckoutButtonInitializeOptions,\n    ): void {\n        const { buttonContainerClassName, style, onComplete, onError } = paypalcommerceinline;\n\n        if (!onComplete || typeof onComplete !== 'function') {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerceinline.onComplete\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        const fundingSource = paypalCommerceSdk.FUNDING.CARD;\n\n        const buttonRenderOptions: PaypalCheckoutButtonOptions = {\n            experience: 'accelerated',\n            fundingSource,\n            style,\n            createOrder: () => this._createOrder(methodId),\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this._onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this._onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this._onApprove(data, actions, methodId),\n            onComplete: (data: CompleteCallbackDataPayload) =>\n                this._onComplete(data, methodId, onComplete),\n            onError: (error: Error) => this._onError(error, onError),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            const buttonContainerId = `${containerId}-paypal-accelerated-checkout-button`;\n\n            this._createPayPalButtonContainer(\n                containerId,\n                buttonContainerId,\n                buttonContainerClassName,\n            );\n            paypalButtonRender.render(`#${buttonContainerId}`);\n        }\n    }\n\n    private async _createOrder(methodId: string): Promise<string> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(methodId, {\n            cartId: cart.id,\n        });\n\n        return orderId;\n    }\n\n    private async _onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this._getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        // Info: we use the same address to fill billing and consignment addresses to have valid quota on BE for order updating process\n        // on this stage we don't have access to valid customer's address accept shipping data\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n\n        const shippingOption = this._getShippingOptionOrThrow();\n\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n        );\n        await this._updateOrder();\n    }\n\n    private async _onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this._getShippingOptionOrThrow(data.selectedShippingOption.id);\n\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n        );\n        await this._updateOrder();\n    }\n\n    private async _onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n    ): Promise<boolean> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        if (cart.lineItems.physicalItems.length > 0) {\n            const { payer, purchase_units } = orderDetails;\n            const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n            const address = this._getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: shippingAddress.address_line_1,\n                city: shippingAddress.admin_area_2,\n                countryCode: shippingAddress.country_code,\n                postalCode: shippingAddress.postal_code,\n                stateOrProvinceCode: shippingAddress.admin_area_1,\n            });\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n            await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n            await this._updateOrder();\n        } else {\n            const { payer } = orderDetails;\n\n            const address = this._getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: payer.address.address_line_1,\n                city: payer.address.admin_area_2,\n                countryCode: payer.address.country_code,\n                postalCode: payer.address.postal_code,\n                stateOrProvinceCode: payer.address.admin_area_1,\n            });\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        }\n\n        await this._store.dispatch(\n            this._orderActionCreator.submitOrder({}, { params: { methodId } }),\n        );\n        await this._submitPayment(methodId, data.orderID);\n\n        return true;\n    }\n\n    private async _onComplete(\n        data: CompleteCallbackDataPayload,\n        methodId: string,\n        callback?: () => void,\n    ): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { intent } = paymentMethod.initializationData;\n\n        if (intent === PayPalCommerceIntent.capture) {\n            await this._submitPayment(methodId, data.orderID);\n        }\n\n        if (callback) {\n            callback();\n        }\n    }\n\n    private _onError(error: Error, onError?: () => void): void {\n        if (onError && typeof onError === 'function') {\n            onError();\n        }\n\n        throw new Error(error.message);\n    }\n\n    private async _updateOrder(): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        await this._paypalCommerceRequestSender.updateOrder({\n            availableShippingOptions: consignment.availableShippingOptions,\n            cartId: cart.id,\n            selectedShippingOption: consignment.selectedShippingOption,\n        });\n    }\n\n    private async _submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(\n            this._paymentActionCreator.submitPayment({ methodId, paymentData }),\n        );\n    }\n\n    private _getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this._store.getState();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private _getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private _createPayPalButtonContainer(\n        containerId: string,\n        buttonContainerId: string,\n        buttonContainerClassName = 'PaypalCommerceInlineButton',\n    ): void {\n        const paypalButtonContainer = document.createElement('div');\n\n        paypalButtonContainer.setAttribute('class', buttonContainerClassName);\n        paypalButtonContainer.setAttribute('id', buttonContainerId);\n\n        const container = document.getElementById(containerId);\n\n        if (container) {\n            container.innerHTML = '';\n            container.append(paypalButtonContainer);\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalButtonStyleOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n} from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceButtonInitializeOptions } from './paypal-commerce-button-options';\nimport { PaypalCommerceVenmoButtonInitializeOptions } from './paypal-commerce-venmo-button-options';\n\nexport default class PaypalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        const { buyNowInitializeOptions, currencyCode, initializesOnCheckoutPage } =\n            paypalcommercevenmo;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                cart.currency.code,\n                initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(containerId, methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercevenmo: PaypalCommerceVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style } = paypalcommercevenmo;\n\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const fundingSource = paypalCommerceSdk.FUNDING.VENMO;\n\n        const validButtonStyle = style ? this._getVenmoButtonStyle(style) : {};\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource,\n            style: validButtonStyle,\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage\n            ? 'paypalcommercevenmocheckout'\n            : 'paypalcommercevenmo';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n        });\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getVenmoButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import Factory from './factory';\nimport Registry from './registry';\n\nexport default class ResolveIdRegistry<TType, TToken extends { [key: string]: unknown }> {\n    private _registry: Registry<TType>;\n\n    constructor(private _useFallback = false) {\n        this._registry = new Registry({\n            tokenResolver: this._resolveToken.bind(this),\n            useFallback: this._useFallback,\n        });\n    }\n\n    get(resolveId: TToken): TType {\n        return this._registry.get(this._encodeToken(resolveId));\n    }\n\n    register(resolveId: TToken, factory: Factory<TType>): void {\n        this._registry.register(this._encodeToken(resolveId), factory);\n    }\n\n    private _encodeToken(resolveId: TToken): string {\n        return btoa(JSON.stringify(resolveId));\n    }\n\n    private _decodeToken(token: string): TToken {\n        return JSON.parse(atob(token));\n    }\n\n    private _resolveToken(token: string, registeredTokens: string[]): string | undefined {\n        const query = this._decodeToken(token);\n        const results: Array<{ token: string; matches: number; default: boolean }> = [];\n\n        registeredTokens.forEach((registeredToken) => {\n            const resolverId = this._decodeToken(registeredToken);\n            const result = { token: registeredToken, matches: 0, default: false };\n\n            for (const [key, value] of Object.entries(resolverId)) {\n                if (key in query && query[key] === value) {\n                    result.matches++;\n                }\n\n                if (key === 'default' && value === true) {\n                    result.default = true;\n                }\n            }\n\n            results.push(result);\n        });\n\n        const matched = results\n            .sort((a, b) => b.matches - a.matches)\n            .filter((result) => result.matches > 0)[0];\n\n        if (matched && matched.token) {\n            return matched.token;\n        }\n\n        if (this._useFallback) {\n            const defaultToken = results.find((result) => result.default)?.token;\n\n            if (defaultToken) {\n                return defaultToken;\n            }\n        }\n\n        throw new Error('Unable to resolve to a registered token with the provided token.');\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport {\n    AddressRequestBody,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithApplePayButtonInitializeOptions } from './apple-pay-button-initialize-options';\nimport ApplePaySessionFactory, { assertApplePayWindow } from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { buttonClassName, onPaymentAuthorize } = applepay;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        await this._paymentIntegrationService.loadDefaultCheckout();\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(\n        containerId: string,\n        buttonClassName = 'apple-pay-checkout-button',\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        document.body.classList.add('apple-pay-supported');\n\n        const button = document.createElement('div');\n\n        button.classList.add(buttonClassName);\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-label', 'Apple Pay button');\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        unselectedOptions?.forEach((option) =>\n            shippingOptions.push({\n                label: option.description,\n                amount: `${option.cost.toFixed(decimalPlaces)}`,\n                detail: option.additionalDescription,\n                identifier: option.id,\n            }),\n        );\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport {\n    createPaymentClient,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n} from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\nimport createCheckoutButtonRegistryV2 from './create-checkout-button-registry-v2';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions,\n): CheckoutButtonInitializer {\n    const { host, locale = 'en' } = options ?? {};\n    const store = createCheckoutStore();\n    const paymentClient = createPaymentClient(store);\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createCheckoutButtonRegistryV2(paymentIntegrationService);\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(\n                store,\n                paymentClient,\n                requestSender,\n                formPoster,\n                locale,\n                host,\n            ),\n            registryV2,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        ),\n    );\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { CustomerActionCreator, CustomerRequestSender } from '../customer';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    createPaymentClient,\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../shipping';\nimport {\n    createSpamProtection,\n    PaymentHumanVerificationHandler,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport createPaymentIntegrationSelectors from './create-payment-integration-selectors';\nimport DefaultPaymentIntegrationService from './default-payment-integration-service';\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default function createPaymentIntegrationService(\n    store: CheckoutStore,\n): PaymentIntegrationService {\n    const {\n        config: { getHost },\n    } = store.getState();\n\n    const requestSender = createRequestSender({ host: getHost() });\n\n    const storeProjectionFactory = new PaymentIntegrationStoreProjectionFactory(\n        createPaymentIntegrationSelectors,\n    );\n\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n\n    const hostedFormFactory = new HostedFormFactory(store);\n\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender)),\n    );\n\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n    );\n\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        new ConsignmentRequestSender(requestSender),\n        new CheckoutRequestSender(requestSender),\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(createPaymentClient(store)),\n        orderActionCreator,\n        new PaymentRequestTransformer(),\n        new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n    );\n\n    const customerActionCreator = new CustomerActionCreator(\n        new CustomerRequestSender(requestSender),\n        checkoutActionCreator,\n        new SpamProtectionActionCreator(\n            createSpamProtection(createScriptLoader()),\n            new SpamProtectionRequestSender(requestSender),\n        ),\n    );\n\n    return new DefaultPaymentIntegrationService(\n        store,\n        storeProjectionFactory,\n        checkoutActionCreator,\n        hostedFormFactory,\n        orderActionCreator,\n        billingAddressActionCreator,\n        consignmentActionCreator,\n        paymentMethodActionCreator,\n        paymentActionCreator,\n        customerActionCreator,\n    );\n}\n","import {\n    CheckoutButtonStrategy,\n    CheckoutButtonStrategyFactory,\n    CheckoutButtonStrategyResolveId,\n    isResolvableModule,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ResolveIdRegistry } from '../common/registry';\nimport * as defaultCheckoutButtonStrategyFactories from '../generated/checkout-button-strategies';\n\nexport interface CheckoutButtonStrategyFactories {\n    [key: string]: CheckoutButtonStrategyFactory<CheckoutButtonStrategy>;\n}\n\nexport default function createCheckoutButtonStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    checkoutButtonStrategyFactories: CheckoutButtonStrategyFactories = defaultCheckoutButtonStrategyFactories,\n): ResolveIdRegistry<CheckoutButtonStrategy, CheckoutButtonStrategyResolveId> {\n    const registry = new ResolveIdRegistry<\n        CheckoutButtonStrategy,\n        CheckoutButtonStrategyResolveId\n    >();\n\n    for (const [, createCheckoutButtonStrategy] of Object.entries(\n        checkoutButtonStrategyFactories,\n    )) {\n        if (\n            !isResolvableModule<\n                CheckoutButtonStrategyFactory<CheckoutButtonStrategy>,\n                CheckoutButtonStrategyResolveId\n            >(createCheckoutButtonStrategy)\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createCheckoutButtonStrategy.resolveIds) {\n            registry.register(resolverId, () =>\n                createCheckoutButtonStrategy(paymentIntegrationService),\n            );\n        }\n    }\n\n    return registry;\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function isResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n): module is ResolvableModule<TModule, TIdentifier> {\n    return 'resolveIds' in module;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader, getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { ApplePaySessionFactory } from '../payment/strategies/apple-pay';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayAdyenV2Initializer,\n    GooglePayAdyenV3Initializer,\n    GooglePayAuthorizeNetInitializer,\n    GooglePayBNZInitializer,\n    GooglePayBraintreeInitializer,\n    GooglePayCheckoutcomInitializer,\n    GooglePayCybersourceV2Initializer,\n    GooglePayOrbitalInitializer,\n    GooglePayStripeInitializer,\n    GooglePayStripeUPEInitializer,\n} from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport {\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n} from '../payment/strategies/paypal-commerce';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../shipping';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\nimport { ApplePayButtonStrategy } from './strategies/apple-pay';\nimport {\n    BraintreePaypalButtonStrategy,\n    BraintreePaypalCreditButtonStrategy,\n    BraintreeVenmoButtonStrategy,\n} from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\nimport {\n    PaypalCommerceAlternativeMethodsButtonStrategy,\n    PaypalCommerceButtonStrategy,\n    PaypalCommerceCreditButtonStrategy,\n    PaypalCommerceInlineCheckoutButtonStrategy,\n    PaypalCommerceVenmoButtonStrategy,\n} from './strategies/paypal-commerce';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    locale: string,\n    host?: string,\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        remoteCheckoutRequestSender,\n        checkoutActionCreator,\n    );\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator,\n    );\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentHumanVerificationHandler = new PaymentHumanVerificationHandler(\n        createSpamProtection(createScriptLoader()),\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        paymentRequestSender,\n        orderActionCreator,\n        paymentRequestTransformer,\n        paymentHumanVerificationHandler,\n    );\n    const braintreeSdkCreator = new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader));\n    const paypalScriptLoader = new PaypalCommerceScriptLoader(scriptLoader);\n    const paypalCommerceRequestSender = new PaypalCommerceRequestSender(requestSender);\n    const subscriptionsRequestSender = new SubscriptionsRequestSender(requestSender);\n    const subscriptionsActionCreator = new SubscriptionsActionCreator(subscriptionsRequestSender);\n    const billingAddressRequestSender = new BillingAddressRequestSender(requestSender);\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        billingAddressRequestSender,\n        subscriptionsActionCreator,\n    );\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        consignmentRequestSender,\n        checkoutRequestSender,\n    );\n    const cartRequestSender = new CartRequestSender(requestSender);\n\n    registry.register(\n        CheckoutButtonMethodType.APPLEPAY,\n        () =>\n            new ApplePayButtonStrategy(\n                store,\n                checkoutActionCreator,\n                requestSender,\n                paymentMethodActionCreator,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n                remoteCheckoutActionCreator,\n                orderActionCreator,\n                new ApplePaySessionFactory(),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.AMAZON_PAY_V2,\n        () =>\n            new AmazonPayV2ButtonStrategy(\n                store,\n                checkoutActionCreator,\n                createAmazonPayV2PaymentProcessor(),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL,\n        () =>\n            new BraintreePaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT,\n        () =>\n            new BraintreePaypalCreditButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_VENMO,\n        () =>\n            new BraintreeVenmoButtonStrategy(\n                store,\n                paymentMethodActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ADYENV2,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV2Initializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ADYENV3,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV3Initializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAuthorizeNetInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_BNZ,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayBNZInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayBraintreeInitializer(braintreeSdkCreator),\n                ),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayCheckoutcomInitializer(requestSender),\n                ),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayCybersourceV2Initializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ORBITAL,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayOrbitalInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_STRIPE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeUPEInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.MASTERPASS,\n        () =>\n            new MasterpassButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new MasterpassScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALEXPRESS,\n        () =>\n            new PaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new PaypalScriptLoader(scriptLoader),\n                formPoster,\n                host,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE,\n        () =>\n            new PaypalCommerceButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE_CREDIT,\n        () =>\n            new PaypalCommerceCreditButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n                orderActionCreator,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE_APMS,\n        () =>\n            new PaypalCommerceAlternativeMethodsButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE_INLINE,\n        () =>\n            new PaypalCommerceInlineCheckoutButtonStrategy(\n                store,\n                checkoutActionCreator,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n                orderActionCreator,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE_VENMO,\n        () =>\n            new PaypalCommerceVenmoButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n            ),\n    );\n\n    return registry;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","message","object","name","type","setPrototypeOf","__proto__","Error","captureStackTrace","stack","DEFAULT_RESPONSE","body","headers","status","response","errors","joinErrors","reduce","result","error","join","mapFromPaymentErrorResponse","Array","isArray","_factoryMethods","this","register","detail","title","length","map","code","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","default","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","split","errorResponse","storefrontErrorResponse","internalErrorResponse","CheckoutActionType","ErrorActionType","OrderActionType","SubscriptionsActionType","BillingAddressActionType","omitDeep","predicate","isPlainObject","transform","omitBy","clearErrorReducer","state","action","ClearError","isClearErrorAction","payload","isEqual","objectA","objectB","options","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","replace","currentValue","newValue","undefined","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","combineReducers","data","dataReducer","composeReducers","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadCheckoutSucceeded","LoadOrderSucceeded","billingAddress","LoadCheckoutRequested","LoadCheckoutFailed","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","b","id","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","CouponActionType","GiftCertificateActionType","ConsignmentActionType","CheckoutButtonActionType","cartReducer","CreateConsignmentsSucceeded","DeleteConsignmentSucceeded","UpdateConsignmentSucceeded","UpdateShippingOptionSucceeded","LoadShippingOptionsSucceeded","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","cart","ConfigActionType","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","meta","methodId","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","CustomerActionType","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","CustomerStrategyActionType","customerReducer","customer","CreateCustomerAddressSucceeded","StripeLinkAuthenticated","CreateCustomerRequested","CreateCustomerSucceeded","CreateCustomerFailed","CreateCustomerAddressRequested","CreateCustomerAddressFailed","FormFieldsActionType","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","ExecutePaymentMethodCheckoutRequested","ExecutePaymentMethodCheckoutSucceeded","executePaymentMethodCheckoutError","executePaymentMethodCheckoutMethodId","ExecutePaymentMethodCheckoutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isExecutingPaymentMethodCheckout","isWidgetInteracting","CountryActionType","formFieldsReducer","LoadFormFieldsSucceeded","LoadFormFieldsFailed","LoadFormFieldsRequested","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","PaymentActionType","PaymentMethodActionType","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","omit","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","SubmitPaymentSucceeded","PaymentStrategyActionType","paymentMethodReducer","LoadPaymentMethodSucceeded","array","item","defaultPredicate","pick","findIndex","pickBy","push","existingItem","mergeOrPush","gateway","LoadPaymentMethodsSucceeded","methodA","methodB","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","loadMethodId","loadMethodError","LoadPaymentMethodFailed","isLoadingMethod","InstrumentActionType","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","RemoteCheckoutActionType","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","PickupOptionActionType","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignments","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","objectFlatten","parent","flattened","forEach","keyString","assign","objectWithSortedKeys","sort","previous","current","ShippingCountryActionType","pickupOptionReducer","LoadPickupOptionsSucceeded","sortedflattenedMeta","consignmentId","searchArea","btoa","JSON","stringify","LoadPickupOptionsRequested","LoadPickupOptionsFailed","ShippingStrategyActionType","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","SignInEmailActionType","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","StoreCreditActionType","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","SpamProtectionActionType","subscriptionsReducer","checkoutReducer","UpdateCheckoutSucceeded","VerifyCheckoutSucceeded","orderId","UpdateCheckoutRequested","UpdateCheckoutFailed","MissingDataErrorType","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","creator","combiner","args","pop","combinerArgs","memoize","guard","errorFactory","createFreezeProxy","target","trap","proxy","create","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","charAt","deepFreeze","createProxy","provider","method","barclays","braintree","braintreepaypal","authorizenet","elavon","checkoutcom","sagepay","stripe","cybersource","cybersourcev2","bnz","converge","bluesnapv2","orbital","paymetric","bolt","digitalriver","moneris","cba_mpgs","worldpayaccess","normalize","address","firstName","lastName","company","address1","address2","city","stateOrProvince","countryCode","postalCode","phone","customFields","identity","createInternalCheckoutSelectorsFactory","getBillingAddress","getBillingAddressOrThrow","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","isLoading","getState","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getCustomerOrThrow","getCreateAccountError","isCreatingCustomerAccount","getCreateAddressError","isCreatingCustomerAddress","getCheckout","getShippingAddress","getShippingAddressOrThrow","getShippingAddresses","getShippingAddressesOrThrow","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentIdOrThrow","getPaymentStatus","getPaymentStatusOrThrow","getPaymentToken","getPaymentTokenOrThrow","getPaymentRedirectUrl","getPaymentRedirectUrlOrThrow","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","loadError","memoizeOne","createCartSelector","getCart","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","some","find","values","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","context","getStoreConfig","_","formState","formFields","storeConfig","getStoreConfigOrThrow","getContextConfig","getExternalSource","externalSource","getHost","host","getLocale","locale","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","countries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","isCreating","createAddressError","isCreatingAddress","createCustomerStrategySelector","getSignInError","getSignOutError","getExecutePaymentMethodCheckoutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","instrument","bigpayToken","card","isMatch","getCardInstrumentOrThrow","MissingPaymentInstrument","getInstruments","flatMap","supportedProvider","getInstrumentsMeta","getDeleteError","createInstrumentSelectorFactory","createFormSelector","getShippingAddressFields","selectedCountry","shippingAddress","field","processField","getBillingAddressFields","getCustomerAccountFields","customerAccount","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createPickupOptionSelector","getPickupOptions","pickupOptions","sortedFlattenedParams","createPickupOptionSelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","shippingConsignment","consignment","selectedPickupOption","shippingConsignments","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","getConsignments","getConsignmentsOrThrow","getConsignmentById","getConsignmentByAddress","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","concat","lineItemIds","lineItems","physicalItems","indexOf","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","checkout","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderOrThrow","getOrderMeta","payments","currentPayment","paymentId","createOrderSelectorFactory","createPaymentSelector","providerId","internalPayment","MissingPaymentId","step","MissingPaymentStatus","redirectUrl","MissingPaymentRedirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","signInEmail","sendError","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","config","shouldWarnMutation","createCheckoutStore","initialState","factory","requestErrorFactory","actionTransformer","action$","from","pipe","catchError","every","createInternalCheckoutSelectors","createDataStore","stateTransformer","createPaymentClient","store","paymentClient","subscribe","setHost","paymentSettings","bigpayBaseUrl","cacheAction","fn","Observable","shareReplay","isActionOptions","param","useCache","cachableActionDecorator","descriptor","memoizedMethods","WeakMap","decorateMethod","lastArg","instanceMethods","set","isApplePayWindow","window","assertApplePayWindow","_requestSender","loadPaymentMethods","observer","next","createAction","params","cartId","then","deviceSessionId","sessionHash","methods","filteredMethods","_filterApplePay","complete","catch","createErrorAction","loadPaymentMethod","ContentType","INTERNAL_USE_ONLY","SDK_VERSION_HEADERS","timeout","Accept","url","throwErrorAction","of","throwError","_subscriptionActionCreator","continueAsGuest","credentials","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","merge","defer","_createOrUpdateBillingAddress","_updateCustomerConsent","updateAddress","email","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","empty","updateSubscriptions","checkoutId","createAddress","DEFAULT_PARAMS","include","post","put","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","loadCheckout","loadConfig","loadFormFields","loadDefaultCheckout","updateCheckout","loadCurrentCheckout","joinIncludes","includes","uniq","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","difference","mergeIncludes","cartA","cartB","_normalize","cartAmount","currency","digitalItems","slice","itemA","itemB","productId","variantId","localeCompare","extendedSalePrice","quantity","amount","recipient","giftWrapping","updated","validate","comparator","_compareCoupons","_compareGiftCertificates","_getComparableCheckout","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_configRequestSender","isSpamProtectionExecuteSucceededAction","succeededAction","_customerRequestSender","_checkoutActionCreator","_spamProtectionActionCreator","createCustomer","isStorefrontSpamProtectionEnabled","checkoutSettings","createAccount","switchMap","execute","customerAddress","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","delete","_formFieldsRequestSender","loadFields","promise","cancellable","Promise","reject","cancel","race","_mutationObserver","ensurePresence","targets","mutationsList","mutation","removedNodes","node","contains","observe","document","childList","subtree","output","disconnect","_window","callback","MutationObserver","parseUrl","test","anchor","createElement","href","port","hostname","hash","origin","protocol","pathname","search","isIframeEvent","targetOrigin","_targetWindow","_targetOrigin","event","targetWindow","fromEvent","successType","errorType","take","toPromise","postMessage","setTarget","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","bind","sourceOrigin","_sourceOrigins","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","_googleRecaptcha","handle","errorOrId","handleWithRecaptchaSitekey","handleWithPaymentHumanVerificationRequestError","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","_performRecaptcha","human_verification_token","recaptchaSitekey","cardingProtectionElementId","cardingProtectionElement","getElementById","parentNode","removeChild","setAttribute","appendChild","load","NotInitializedErrorType","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","container","event$","Subject","_widgetId","render","size","getResponse","reset","_event$","_recaptcha","element","querySelector","retryWhen","delay","TIMEOUT","_watchRecaptchaChallengeWindow","iframeContainer","parentElement","style","visibility","attributes","attributeFilter","_scriptLoader","_loadPromise","_loadScript","resolve","grecaptcha","loadScript","createSpamProtection","scriptLoader","MutationObserverFactory","fieldErrors","HostedFieldEventType","HostedInputEventType","_type","_containerId","_placeholder","_accessibilityLabel","_styles","_eventPoster","_eventListener","_detachmentObserver","_cardInstrument","_iframe","src","border","height","overflow","width","getType","attach","contentWindow","AttachRequested","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","placeholder","styles","location","AttachSucceeded","AttachFailed","detach","submitForm","fields","SubmitRequested","SubmitSucceeded","SubmitFailed","_isSubmitErrorEvent","validateForm","ValidateRequested","Validated","isValid","links","querySelectorAll","link","fontFamily","family","_fields","_payloadTransformer","_eventCallbacks","_paymentHumanVerificationHandler","_handleEnter","noop","onBlur","onCardTypeChange","onFocus","onValidate","Blurred","CardTypeChanged","Focused","Entered","_cardType","cardType","BinChanged","_bin","bin","getBin","getCardType","_getFirstField","otherFields","without","all","otherField","submit","additionalActionData","additionalAction","isVaultedInstrument","_store","instrumentMeta","orderMeta","paymentData","paymentMethodMeta","authToken","vaultAccessToken","fieldOptions","_getCardInstrument","createScriptLoader","_orderRequestSender","_checkoutValidator","loadOrder","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","submitOrder","SubmitOrderRequested","shouldExecuteSpamCheck","_mapToOrderRequestBody","customerMessage","checkoutVariant","SubmitOrderFailed","finalizeOrder","FinalizeOrderRequested","FinalizeOrderFailed","isNil","_paymentRequestSender","_orderActionCreator","_paymentRequestTransformer","initializeOffsitePayment","shouldSaveInstrument","shouldSetAsDefaultInstrument","formattedPayload","bigpay_token","vault_payment_instrument","set_as_default_stored_instrument","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","_client","_transformResponse","statusText","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","_decimalPlaces","toInteger","round","pow","CheckoutButtonMethodType","couponTypes","mapToInternalCoupon","coupon","discount","displayName","discountType","couponType","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalLineItems","itemMap","decimalPlaces","idKey","amountTransformer","imageUrl","amountAfterDiscount","integerAmount","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","sender","mapGiftCertificateToInternalLineItem","extendedListPrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","option","addedByPromotion","mapToInternalLineItem","mapToInternalLineItemType","mapToInternalCart","promotions","notifications","sum","discountNotifications","promotion","banners","banner","placeholders","messageHtml","text","totalDiscountedAmount","certificate","appliedGiftCertificates","keyBy","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","lineItem","isShippingRequired","subtotal","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","mapToInternalCustomer","addresses","customerId","fullName","customerGroupName","customerGroup","format","month","year","trimmedMonth","trimmedYear","toObject","number","maxLength","creditCardType","info","lengths","unformattedValue","unformat","gaps","gapIndex","mapToInternalOrder","customerCanBeCreated","mapToInternalOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","description","image","shareText","sharingLink","channelName","channel","channelCode","mapToInternalShippingOption","isSelected","price","cost","selected","isRecommended","transitTime","_cardExpiryFormatter","_cardNumberFormatter","checkoutState","formattedInstrument","_mapShippingAddress","shippingOption","contextConfig","paymentMeta","internalCustomer","_transformPaymentMethod","quoteMeta","request","geoCountryCode","source","storeProfile","transformWithHostedFormData","_transformHostedInputValues","initializationData","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","hostedFormNonce","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","isBopisEnabled","bopis","enabled","requiredAddress","isPickup","CheckoutIncludes","_consignmentRequestSender","unassignItemsByAddress","_consignmentHasAddress","existingConsignment","_removeLineItems","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","AvailableShippingOptions","_getUpdateAddressRequestBody","createConsignments","updateShippingOption","_isUpdateConsignmentRequest","customItems","itemId","_hydrateLineItems","sharedItem","DEFAULT_INCLUDES","initialize","spamProtectionElementId","spamProtectionElement","googleRecaptchaSitekey","verifyCheckoutSpamProtection","VerifyCheckoutRequested","VerifyCheckoutFailed","_subscriptionsRequestSender","cloneDeep","input","cloneDeepSafe","cache","cloneResult","createPaymentIntegrationSelectors","isPaymentMethodInitialized","_storeProjectionFactory","_hostedFormFactory","_billingAddressActionCreator","_consignmentActionCreator","_paymentMethodActionCreator","_paymentActionCreator","_customerActionCreator","_storeProjection","createHostedForm","subscriber","filters","initializeOffsitePaymentConfig","dispatch","updateBillingAddress","updateShippingAddress","ProjectionActionType","_transformSelectors","projection","Synchronize","initial","createDataStoreProjection","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","getKey","_resolveMap","parentMap","cacheKey","usedCount","_generateMap","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","isPrivate","selectorDecorator","resolver","memoizedMethod","cachedValue","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","_buttonStrategyActionCreator","_state","initializeButton","containerIds","selector","idPrefix","containers","uniqueId","setUniqueElementId","queueId","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_registryV2","paymentMethodRequestParams","currencyCode","paymentMethodRequestOptions","_getStrategy","strategy","createBuyNowCart","_factories","_instances","_defaultToken","defaultToken","_useFallback","useFallback","_tokenResolver","tokenResolver","cacheToken","_getInstance","_hasFactory","_hasInstance","resolvedToken","getShippableItemsCount","total","AmazonPayV2Regions","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","_amazonPayV2ScriptLoader","_amazonPayV2SDK","_buttonParentContainer","_createAmazonPayButtonParentContainer","_amazonPayV2Button","remove","bindButton","buttonId","sessionId","changeAction","_getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","renderButton","prepareCheckout","createCheckoutSessionConfig","publicKeyId","signedPayload","requestConfig","_isEnvironmentSpecific","_getAmazonPayV2Button","onClick","initCheckout","signout","renderAmazonPayButton","decoupleCheckoutInitiation","placement","parentContainerId","_getButtonParentContainer","amazonPayV2ButtonOptions","_getAmazonPayV2ButtonOptions","isPh4Enabled","features","storeCountryCode","isPh4UsOnly","uid","random","substr","parentContainer","merchantId","testMode","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","shopPath","buttonBaseConfig","productType","PayOnly","PayAndShip","buttonColor","Gold","buttonOptions","tmpConfig","sandbox","estimatedOrderAmount","createCheckoutSession","_getOrThrow","region","amazonPayV2Region","amazon","ApplePaySession","PAYPAL_COMPONENTS","_braintreeScriptLoader","_dataCollectors","clientToken","_clientToken","getClient","loadClient","client","authorization","getPaypal","_paypal","loadPaypal","getPaypalCheckout","onSuccess","onError","loadPaypalCheckout","paypalCheckout","paypalCheckoutConfig","paypalCheckoutCallback","braintreePaypalCheckout","paypalSdkLoadConfig","components","paypal","loadPayPalSDK","_paypalCheckout","getVenmoCheckout","_venmoCheckout","loadVenmoCheckout","venmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","venmoCheckoutCallback","braintreeVenmoCheckout","isBrowserSupported","get3DS","_3ds","load3DS","version","getDataCollector","cached","loadDataCollector","kount","deviceData","teardown","getVisaCheckout","_visaCheckout","loadVisaCheckout","getGooglePaymentComponent","_googlePay","loadGooglePayment","createHostedFields","loadHostedFields","_teardown","mod","threeDSecure","dataCollector","visaCheckout","venmo","googlePayment","hostedFields","ButtonType","ButtonColor","BillingAddressFormat","getFirstAndLastName","nameParts","_googlePayScriptLoader","_googlePayInitializer","_isBuyNowFlow","_methodId","_configureWallet","buttonType","Short","Default","_googlePayClient","updatePaymentDataRequest","payloadToUpdate","paymentDataRequest","_getPaymentDataRequest","transactionInfo","totalPrice","_paymentDataRequest","displayWallet","loadPaymentData","handleSuccess","parseResponse","tokenizePayload","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","updateBuyNowFlowFlag","isBuyNowFlow","_getMethodId","_getCheckout","hasShippingAddress","googlePay","_getGooglePayClient","isReadyToPay","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","apiVersion","apiVersionMinor","_getCardInformation","cardInformation","lastFour","google","environment","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","customerEmail","paymentMethodData","locality","companyName","address3","administrativeArea","phoneNumber","postPaymentData","details","buyNowCartId","payment_type","tokenFormat","card_information","cart_id","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","requestSender","createRequestSender","getScriptLoader","_getGooglePayPaymentDataRequest","gatewayMerchantId","merchantName","merchantInfo","authJwt","billingAddressRequired","billingAddressParameters","Full","phoneNumberRequired","tokenizationSpecification","totalPriceStatus","toFixed","emailRequired","shippingAddressRequired","shippingAddressParameters","baseRequest","_getGooglePaymentDataRequest","supportedCards","paymentGatewaySpecification","_getPaymentGatewaySpecification","cardPaymentMethod","_getCardPaymentMethod","_braintreeSDKCreator","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parse","tokenizationData","androidPayCards","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","googleMerchantName","googleMerchantId","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_publishableKey","_testMode","_errorMessage","checkoutcomkey","_mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2","err","signature","protocolVersion","signedMessage","_convertToken","finalToken","cardNetwork","cardDetails","token_format","_requestCheckoutcomTokenize","token_data","checkoutcomToken","checkoutcomKey","Authorization","last4","stripeVersion","stripePublishableKey","stripeConnectedAccount","useMasterpassSrc","language","sourceUrl","masterpass","scriptSrc","async","getPayPalSDK","initializesOnCheckoutPage","_paypalSdk","_getPayPalSdkScriptConfigOrThrow","paypalSdkScriptConfig","paypalLoadScript","clientId","intent","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isInlineCheckoutEnabled","isPayPalCreditAvailable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","shouldShowInlineCheckout","commit","shouldEnableCard","enableCardFunding","disableCardFunding","enableCreditFunding","disableCreditFunding","shouldEnableAPMs","enableVenmoFunding","disableVenmoFunding","enableAPMsFunding","disableAPMsFunding","apm","disableFunding","enableFunding","setupPayment","isCredit","isCheckout","isCreditCard","isAPM","isVenmo","createOrder","requestBody","getOrderStatus","updateOrder","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","signOut","generateToken","trackAuthorizationEvent","forgetCheckout","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","ForgetCheckoutRemoteCustomerRequested","ForgetCheckoutRemoteCustomerSucceeded","ForgetCheckoutRemoteCustomerFailed","_amazonPayV2PaymentProcessor","amazonpay","Cart","DefaultLabels","_remoteCheckoutActionCreator","_sessionFactory","_onAuthorizeCallback","_subTotalLabel","Subtotal","_shippingLabel","Shipping","applepay","buttonClassName","onPaymentAuthorize","_paymentMethod","_applePayButton","_createButton","_handleWalletButtonClick","classList","add","button","preventDefault","_getBaseRequest","applePaySession","_handleApplePayEvents","begin","storeName","merchantCapabilities","supportedNetworks","requiresShipping","requiredBillingContactFields","requiredShippingContactFields","tax","onvalidatemerchant","_onValidateMerchant","merchantSession","completeMerchantValidation","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","onpaymentauthorized","_onPaymentAuthorized","_transformContactToAddress","shippingContact","abort","selectionShippingOptionId","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","shippingOptions","additionalDescription","identifier","completeShippingContactSelection","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","newTotal","newLineItems","_getUpdatedLineItems","completeShippingMethodSelection","validationURL","bigPayEndpoint","paymentsUrl","billingContact","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","transformedBillingAddress","transformedShippingAddress","emailAddress","completePayment","STATUS_SUCCESS","STATUS_FAILURE","contact","givenName","familyName","addressLines","mapToBraintreeShippingAddressOverride","recipientName","line1","line2","getValidButtonStyle","color","fundingicons","layout","shape","tagline","validStyles","getValidHeight","mapToLegacyBillingAddress","first_name","last_name","phone_number","address_line_1","address_line_2","country_code","postal_code","mapToLegacyShippingAddress","_cartRequestSender","_formPoster","messagingContainerId","buyNowInitializeOptions","paypalCheckoutOptions","paypalCheckoutSuccessCallback","_renderPayPalComponents","paypalCheckoutErrorCallback","_handleError","_renderPayPalMessages","_renderPayPalButton","shouldProcessPayment","onAuthorizeError","fundingSource","FUNDING","PAYPAL","validButtonStyle","paypalButtonRender","Buttons","env","_setupPayment","onApprove","authorizeData","_tokenizePayment","isEligible","_removeElement","isMessageContainerAvailable","Messages","onPaymentError","_createBuyNowCart","_buyNowCart","shippingAddressOverride","createPayment","flow","enableShippingAddress","shippingAddressEditable","offerCredit","getBuyNowCartRequestBody","cartRequestBody","tokenizePayment","postForm","device_data","billing_address","shipping_address","buttonContainerId","onErrorCallback","elementId","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","braintreepaypalcredit","hasRenderedSmartButton","fundingSources","PAYLATER","CREDIT","buttonStyle","venmoButtonStyle","backgroundColor","backgroundPosition","backgroundSize","backgroundImage","backgroundRepeat","borderRadius","cursor","transition","minHeight","minWidth","_onError","braintreevenmo","_handleInitializationVenmoSuccess","_handleInitializationVenmoError","_renderVenmoButton","_removeVenmoContainer","buttonContainer","venmoButton","buyBowCart","tokenize","removeAttribute","_handlePostForm","_googlePayPaymentProcessor","googlePayOptions","_getGooglePayOptions","hasBuyNowCartOptions","_walletButton","_createSignInButton","googlePayButton","googlepayadyenv2","googlepayadyenv3","googlepayauthorizenet","googlepaybnz","googlepaybraintree","googlepaycheckoutcom","googlepaycybersourcev2","googlepayorbital","googlepaystripe","googlepaystripeupe","hasPhysicalItems","String","_onPaymentSelectComplete","supportedLocales","es","en","pt","zu","ar","zh","ms","uk","sv","hr","pl","nl","it","de","fr","formatLocale","localeLanguage","toLowerCase","formattedLocale","countryLocales","_masterpassScriptLoader","_locale","masterpassScriptLoaderParams","isMasterpassSrcEnabled","_masterpassClient","_signInButton","subdomain","_createMasterpassPayload","allowedCardTypes","CheckoutButtonNotInitialized","_paypalScriptLoader","_host","paypalOptions","fundingCreditOption","allowedSources","allowCredit","disallowedSources","Button","funding","allowed","disallowed","RECT","RESPONSIVE","actions","onAuthorize","res","paymentID","payerID","payerId","payerInfo","payer","payer_info","StyleButtonLabel","StyleButtonLayout","StyleButtonColor","StyleButtonShape","PayPalCommerceIntent","getValidColor","getValidLabel","getValidLayout","getValidShape","getValidTagline","horizontal","_paypalCommerceRequestSender","paypalcommerce","_paypalCommerceSdk","_renderButton","onComplete","paypalCommerceSdk","_getPayPalCommerceSdkOrThrow","paypalCallbacks","onShippingAddressChange","_onShippingAddressChange","onShippingOptionsChange","_onShippingOptionsChange","_onHostedCheckoutApprove","orderID","buttonRenderOptions","_getButtonStyle","_handleClick","_createOrder","paypalButton","_buyNowCartId","_getOrderDetailsOrThrow","orderDetails","purchase_units","_getAddress","given_name","surname","email_address","admin_area_2","admin_area_1","_updateOrder","_submitPayment","_getShippingOptionOrThrow","device_info","method_id","paypal_account","order_id","selectedShippingOptionId","recommendedShippingOption","shippingOptionToSelect","paypalcommercecredit","_renderMessages","paypalMessagesOptions","paypalcommercealternativemethods","paypalcommerceinline","buttonContainerClassName","experience","CARD","_onApprove","_onComplete","_createPayPalButtonContainer","capture","paypalButtonContainer","innerHTML","append","paypalcommercevenmo","VENMO","_getVenmoButtonStyle","_resolveToken","resolveId","_encodeToken","_decodeToken","atob","registeredTokens","query","results","registeredToken","resolverId","matches","entries","matched","_paymentIntegrationService","paymentIntegrationService","resolveIds","createCheckoutButtonInitializer","formPoster","createFormPoster","storeProjectionFactory","checkoutActionCreator","hostedFormFactory","orderActionCreator","billingAddressActionCreator","consignmentActionCreator","paymentMethodActionCreator","paymentActionCreator","customerActionCreator","createPaymentIntegrationService","registryV2","checkoutButtonStrategyFactories","registry","createCheckoutButtonStrategy","isResolvableModule","checkoutRequestSender","remoteCheckoutRequestSender","remoteCheckoutActionCreator","checkoutValidator","paymentRequestSender","paymentRequestTransformer","paymentHumanVerificationHandler","braintreeSdkCreator","paypalScriptLoader","paypalCommerceRequestSender","subscriptionsRequestSender","subscriptionsActionCreator","billingAddressRequestSender","consignmentRequestSender","cartRequestSender","createCheckoutButtonRegistry"],"sourceRoot":""}